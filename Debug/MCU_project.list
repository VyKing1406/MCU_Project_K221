
MCU_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031dc  080031dc  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080031dc  080031dc  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031dc  080031dc  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031dc  080031dc  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080031e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  20000030  08003214  00020030  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  08003214  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae41  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed7  00000000  00000000  0002ae9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0002cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  0002da38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b28  00000000  00000000  0002e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db2f  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008691e  00000000  00000000  0003dc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c4595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000358c  00000000  00000000  000c45e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	0800319c 	.word	0x0800319c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	0800319c 	.word	0x0800319c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__gedf2>:
 80004c4:	f04f 3cff 	mov.w	ip, #4294967295
 80004c8:	e006      	b.n	80004d8 <__cmpdf2+0x4>
 80004ca:	bf00      	nop

080004cc <__ledf2>:
 80004cc:	f04f 0c01 	mov.w	ip, #1
 80004d0:	e002      	b.n	80004d8 <__cmpdf2+0x4>
 80004d2:	bf00      	nop

080004d4 <__cmpdf2>:
 80004d4:	f04f 0c01 	mov.w	ip, #1
 80004d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004e8:	bf18      	it	ne
 80004ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004ee:	d01b      	beq.n	8000528 <__cmpdf2+0x54>
 80004f0:	b001      	add	sp, #4
 80004f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004f6:	bf0c      	ite	eq
 80004f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80004fc:	ea91 0f03 	teqne	r1, r3
 8000500:	bf02      	ittt	eq
 8000502:	ea90 0f02 	teqeq	r0, r2
 8000506:	2000      	moveq	r0, #0
 8000508:	4770      	bxeq	lr
 800050a:	f110 0f00 	cmn.w	r0, #0
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf58      	it	pl
 8000514:	4299      	cmppl	r1, r3
 8000516:	bf08      	it	eq
 8000518:	4290      	cmpeq	r0, r2
 800051a:	bf2c      	ite	cs
 800051c:	17d8      	asrcs	r0, r3, #31
 800051e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000522:	f040 0001 	orr.w	r0, r0, #1
 8000526:	4770      	bx	lr
 8000528:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800052c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000530:	d102      	bne.n	8000538 <__cmpdf2+0x64>
 8000532:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000536:	d107      	bne.n	8000548 <__cmpdf2+0x74>
 8000538:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800053c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000540:	d1d6      	bne.n	80004f0 <__cmpdf2+0x1c>
 8000542:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000546:	d0d3      	beq.n	80004f0 <__cmpdf2+0x1c>
 8000548:	f85d 0b04 	ldr.w	r0, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <__aeabi_cdrcmple>:
 8000550:	4684      	mov	ip, r0
 8000552:	4610      	mov	r0, r2
 8000554:	4662      	mov	r2, ip
 8000556:	468c      	mov	ip, r1
 8000558:	4619      	mov	r1, r3
 800055a:	4663      	mov	r3, ip
 800055c:	e000      	b.n	8000560 <__aeabi_cdcmpeq>
 800055e:	bf00      	nop

08000560 <__aeabi_cdcmpeq>:
 8000560:	b501      	push	{r0, lr}
 8000562:	f7ff ffb7 	bl	80004d4 <__cmpdf2>
 8000566:	2800      	cmp	r0, #0
 8000568:	bf48      	it	mi
 800056a:	f110 0f00 	cmnmi.w	r0, #0
 800056e:	bd01      	pop	{r0, pc}

08000570 <__aeabi_dcmpeq>:
 8000570:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000574:	f7ff fff4 	bl	8000560 <__aeabi_cdcmpeq>
 8000578:	bf0c      	ite	eq
 800057a:	2001      	moveq	r0, #1
 800057c:	2000      	movne	r0, #0
 800057e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000582:	bf00      	nop

08000584 <__aeabi_dcmplt>:
 8000584:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000588:	f7ff ffea 	bl	8000560 <__aeabi_cdcmpeq>
 800058c:	bf34      	ite	cc
 800058e:	2001      	movcc	r0, #1
 8000590:	2000      	movcs	r0, #0
 8000592:	f85d fb08 	ldr.w	pc, [sp], #8
 8000596:	bf00      	nop

08000598 <__aeabi_dcmple>:
 8000598:	f84d ed08 	str.w	lr, [sp, #-8]!
 800059c:	f7ff ffe0 	bl	8000560 <__aeabi_cdcmpeq>
 80005a0:	bf94      	ite	ls
 80005a2:	2001      	movls	r0, #1
 80005a4:	2000      	movhi	r0, #0
 80005a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005aa:	bf00      	nop

080005ac <__aeabi_dcmpge>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff ffce 	bl	8000550 <__aeabi_cdrcmple>
 80005b4:	bf94      	ite	ls
 80005b6:	2001      	movls	r0, #1
 80005b8:	2000      	movhi	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmpgt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffc4 	bl	8000550 <__aeabi_cdrcmple>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <Led_display>:
 */

#include "display_led.h"

void Led_display(uint16_t LOW, uint16_t HIGHT, int state_1, int state_2,
		GPIO_TypeDef *GPIO_1, GPIO_TypeDef *GPIO_2) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4603      	mov	r3, r0
 80005e0:	81fb      	strh	r3, [r7, #14]
 80005e2:	460b      	mov	r3, r1
 80005e4:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(GPIO_1, LOW, state_1);
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	89fb      	ldrh	r3, [r7, #14]
 80005ec:	4619      	mov	r1, r3
 80005ee:	69b8      	ldr	r0, [r7, #24]
 80005f0:	f001 f987 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_2, HIGHT, state_2);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	89bb      	ldrh	r3, [r7, #12]
 80005fa:	4619      	mov	r1, r3
 80005fc:	69f8      	ldr	r0, [r7, #28]
 80005fe:	f001 f980 	bl	8001902 <HAL_GPIO_WritePin>
}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <execute_Mode>:
int index_1_Nomal = 0;
int index_2_Nomal = 0;
int state_1_Nomal[3] = { 0, 1, 1 };
int state_2_Nomal[3] = { 1, 0, 1 };

void execute_Mode(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	if (MODE == 1) {
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <execute_Mode+0x38>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d101      	bne.n	800061c <execute_Mode+0x10>
		Mode_Nomal();
 8000618:	f000 f8b2 	bl	8000780 <Mode_Nomal>
	}
	if (MODE == 2) {
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <execute_Mode+0x38>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d101      	bne.n	8000628 <execute_Mode+0x1c>
		Mode_Red();
 8000624:	f000 f934 	bl	8000890 <Mode_Red>
	}
	if (MODE == 3) {
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <execute_Mode+0x38>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b03      	cmp	r3, #3
 800062e:	d101      	bne.n	8000634 <execute_Mode+0x28>
		Mode_Yellow();
 8000630:	f000 f94e 	bl	80008d0 <Mode_Yellow>
	}
	if (MODE == 4) {
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <execute_Mode+0x38>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b04      	cmp	r3, #4
 800063a:	d101      	bne.n	8000640 <execute_Mode+0x34>
		Mode_Green();
 800063c:	f000 f968 	bl	8000910 <Mode_Green>
	}

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000020 	.word	0x20000020

08000648 <Button_listens>:

void Button_listens() {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	if (flag_button_press[0]) {
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <Button_listens+0x3c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <Button_listens+0x10>
		Mode_Button();
 8000654:	f000 f818 	bl	8000688 <Mode_Button>
	}
	if (flag_button_press[1]) {
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <Button_listens+0x3c>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <Button_listens+0x1c>
		Add_Button();
 8000660:	f000 f83e 	bl	80006e0 <Add_Button>
	}
	if (flag_button_press[2]) {
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <Button_listens+0x3c>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <Button_listens+0x28>
		Confirm_Button();
 800066c:	f000 f85a 	bl	8000724 <Confirm_Button>
	}
	if(flag_button_press[3])
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <Button_listens+0x3c>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d002      	beq.n	800067e <Button_listens+0x36>
	{
		Perdes_Button();
 8000678:	f000 f876 	bl	8000768 <Perdes_Button>
	}
	return;
 800067c:	bf00      	nop
 800067e:	bf00      	nop
}
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000074 	.word	0x20000074

08000688 <Mode_Button>:

void Mode_Button() {
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
	if (MODE++ == 5) {
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <Mode_Button+0x48>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	490f      	ldr	r1, [pc, #60]	; (80006d0 <Mode_Button+0x48>)
 8000694:	600a      	str	r2, [r1, #0]
 8000696:	2b05      	cmp	r3, #5
 8000698:	d102      	bne.n	80006a0 <Mode_Button+0x18>
		MODE = 1;
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <Mode_Button+0x48>)
 800069c:	2201      	movs	r2, #1
 800069e:	601a      	str	r2, [r3, #0]
	}
	if (MODE != 1) {
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <Mode_Button+0x48>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d00b      	beq.n	80006c0 <Mode_Button+0x38>
		Led_buffer_timer[MODE - 2] = Led_timer[MODE - 2];
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <Mode_Button+0x48>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	1e9a      	subs	r2, r3, #2
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <Mode_Button+0x48>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3b02      	subs	r3, #2
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <Mode_Button+0x4c>)
 80006b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006ba:	4907      	ldr	r1, [pc, #28]	; (80006d8 <Mode_Button+0x50>)
 80006bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
	flag_button_press[0] = 0;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <Mode_Button+0x54>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000020 	.word	0x20000020
 80006d4:	20000084 	.word	0x20000084
 80006d8:	20000090 	.word	0x20000090
 80006dc:	20000074 	.word	0x20000074

080006e0 <Add_Button>:

void Add_Button() {
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	if (MODE != 1) {
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <Add_Button+0x38>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d011      	beq.n	8000710 <Add_Button+0x30>
		Led_buffer_timer[MODE - 2]=Led_buffer_timer[MODE - 2]+1000;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <Add_Button+0x38>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3b02      	subs	r3, #2
 80006f2:	4a0a      	ldr	r2, [pc, #40]	; (800071c <Add_Button+0x3c>)
 80006f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <Add_Button+0x38>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3b02      	subs	r3, #2
 80006fe:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000702:	4906      	ldr	r1, [pc, #24]	; (800071c <Add_Button+0x3c>)
 8000704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		flag_button_press[1] = 0;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <Add_Button+0x40>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
	}
	return;
 800070e:	bf00      	nop
 8000710:	bf00      	nop
}
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	20000020 	.word	0x20000020
 800071c:	20000090 	.word	0x20000090
 8000720:	20000074 	.word	0x20000074

08000724 <Confirm_Button>:

void Confirm_Button() {
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	if (MODE != 1) {
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <Confirm_Button+0x34>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d00f      	beq.n	8000750 <Confirm_Button+0x2c>
		Led_buffer_timer[MODE - 2] = Led_timer[MODE - 2];
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <Confirm_Button+0x34>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	1e9a      	subs	r2, r3, #2
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <Confirm_Button+0x34>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3b02      	subs	r3, #2
 800073c:	4907      	ldr	r1, [pc, #28]	; (800075c <Confirm_Button+0x38>)
 800073e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000742:	4907      	ldr	r1, [pc, #28]	; (8000760 <Confirm_Button+0x3c>)
 8000744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		flag_button_press[2] = 0;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <Confirm_Button+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
	}
	return;
 800074e:	bf00      	nop
 8000750:	bf00      	nop
}
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	20000020 	.word	0x20000020
 800075c:	20000084 	.word	0x20000084
 8000760:	20000090 	.word	0x20000090
 8000764:	20000074 	.word	0x20000074

08000768 <Perdes_Button>:


void Perdes_Button(){
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	/// Gọi hàm Lợi.
	flag_button_press[3] = 0;
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <Perdes_Button+0x14>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000074 	.word	0x20000074

08000780 <Mode_Nomal>:

void Mode_Nomal() //*
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af02      	add	r7, sp, #8
	if (Led_buffer_1_timer[index_1_Nomal] == 0) {
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <Mode_Nomal+0xec>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a39      	ldr	r2, [pc, #228]	; (8000870 <Mode_Nomal+0xf0>)
 800078c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d127      	bne.n	80007e4 <Mode_Nomal+0x64>
		if (index_1_Nomal++ == 3) {
 8000794:	4b35      	ldr	r3, [pc, #212]	; (800086c <Mode_Nomal+0xec>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	4934      	ldr	r1, [pc, #208]	; (800086c <Mode_Nomal+0xec>)
 800079c:	600a      	str	r2, [r1, #0]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d102      	bne.n	80007a8 <Mode_Nomal+0x28>
			index_1_Nomal = 0;
 80007a2:	4b32      	ldr	r3, [pc, #200]	; (800086c <Mode_Nomal+0xec>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
		}

		Led_buffer_1_timer[index_1_Nomal] = Led_timer[index_1_Nomal];
 80007a8:	4b30      	ldr	r3, [pc, #192]	; (800086c <Mode_Nomal+0xec>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b2f      	ldr	r3, [pc, #188]	; (800086c <Mode_Nomal+0xec>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4930      	ldr	r1, [pc, #192]	; (8000874 <Mode_Nomal+0xf4>)
 80007b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007b6:	492e      	ldr	r1, [pc, #184]	; (8000870 <Mode_Nomal+0xf0>)
 80007b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		Led_display(Led_11_Pin, Led_12_Pin, state_1_Nomal[index_1_Nomal],
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <Mode_Nomal+0xec>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a2d      	ldr	r2, [pc, #180]	; (8000878 <Mode_Nomal+0xf8>)
 80007c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c6:	4b29      	ldr	r3, [pc, #164]	; (800086c <Mode_Nomal+0xec>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	492c      	ldr	r1, [pc, #176]	; (800087c <Mode_Nomal+0xfc>)
 80007cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d0:	492b      	ldr	r1, [pc, #172]	; (8000880 <Mode_Nomal+0x100>)
 80007d2:	9101      	str	r1, [sp, #4]
 80007d4:	492b      	ldr	r1, [pc, #172]	; (8000884 <Mode_Nomal+0x104>)
 80007d6:	9100      	str	r1, [sp, #0]
 80007d8:	2108      	movs	r1, #8
 80007da:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007de:	f7ff fef9 	bl	80005d4 <Led_display>
				state_2_Nomal[index_1_Nomal], GPIOA, GPIOB);

		return;
 80007e2:	e041      	b.n	8000868 <Mode_Nomal+0xe8>
	}
	if (Led_buffer_2_timer[index_2_Nomal] == 0) {
 80007e4:	4b28      	ldr	r3, [pc, #160]	; (8000888 <Mode_Nomal+0x108>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a28      	ldr	r2, [pc, #160]	; (800088c <Mode_Nomal+0x10c>)
 80007ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d127      	bne.n	8000842 <Mode_Nomal+0xc2>
		if (index_2_Nomal-- == -1) {
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <Mode_Nomal+0x108>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	1e5a      	subs	r2, r3, #1
 80007f8:	4923      	ldr	r1, [pc, #140]	; (8000888 <Mode_Nomal+0x108>)
 80007fa:	600a      	str	r2, [r1, #0]
 80007fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000800:	d102      	bne.n	8000808 <Mode_Nomal+0x88>
			index_2_Nomal = 2;
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <Mode_Nomal+0x108>)
 8000804:	2202      	movs	r2, #2
 8000806:	601a      	str	r2, [r3, #0]
		}
		Led_buffer_2_timer[index_2_Nomal] = Led_timer[index_1_Nomal];
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <Mode_Nomal+0xec>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <Mode_Nomal+0x108>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4918      	ldr	r1, [pc, #96]	; (8000874 <Mode_Nomal+0xf4>)
 8000812:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000816:	491d      	ldr	r1, [pc, #116]	; (800088c <Mode_Nomal+0x10c>)
 8000818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Led_display(Led_21_Pin, Led_22_Pin, state_1_Nomal[index_2_Nomal],
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <Mode_Nomal+0x108>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a15      	ldr	r2, [pc, #84]	; (8000878 <Mode_Nomal+0xf8>)
 8000822:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <Mode_Nomal+0x108>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4914      	ldr	r1, [pc, #80]	; (800087c <Mode_Nomal+0xfc>)
 800082c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000830:	4913      	ldr	r1, [pc, #76]	; (8000880 <Mode_Nomal+0x100>)
 8000832:	9101      	str	r1, [sp, #4]
 8000834:	4912      	ldr	r1, [pc, #72]	; (8000880 <Mode_Nomal+0x100>)
 8000836:	9100      	str	r1, [sp, #0]
 8000838:	2110      	movs	r1, #16
 800083a:	2020      	movs	r0, #32
 800083c:	f7ff feca 	bl	80005d4 <Led_display>
				state_2_Nomal[index_2_Nomal], GPIOB, GPIOB);
		return;
 8000840:	e012      	b.n	8000868 <Mode_Nomal+0xe8>
	}
	Led_buffer_1_timer[index_1_Nomal]--;
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <Mode_Nomal+0xec>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <Mode_Nomal+0xf0>)
 8000848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800084c:	3a01      	subs	r2, #1
 800084e:	4908      	ldr	r1, [pc, #32]	; (8000870 <Mode_Nomal+0xf0>)
 8000850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Led_buffer_2_timer[index_2_Nomal]--;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <Mode_Nomal+0x108>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <Mode_Nomal+0x10c>)
 800085a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800085e:	3a01      	subs	r2, #1
 8000860:	490a      	ldr	r1, [pc, #40]	; (800088c <Mode_Nomal+0x10c>)
 8000862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return;
 8000866:	bf00      	nop
}
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000004c 	.word	0x2000004c
 8000870:	2000009c 	.word	0x2000009c
 8000874:	20000084 	.word	0x20000084
 8000878:	20000000 	.word	0x20000000
 800087c:	2000000c 	.word	0x2000000c
 8000880:	40010c00 	.word	0x40010c00
 8000884:	40010800 	.word	0x40010800
 8000888:	20000050 	.word	0x20000050
 800088c:	200000a8 	.word	0x200000a8

08000890 <Mode_Red>:

void Mode_Red() {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af02      	add	r7, sp, #8
	Led_display(Led_11_Pin, Led_12_Pin, 0, 1, GPIOA, GPIOB);
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <Mode_Red+0x38>)
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <Mode_Red+0x3c>)
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2301      	movs	r3, #1
 80008a0:	2200      	movs	r2, #0
 80008a2:	2108      	movs	r1, #8
 80008a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008a8:	f7ff fe94 	bl	80005d4 <Led_display>
	Led_display(Led_21_Pin, Led_22_Pin, 0, 1, GPIOB, GPIOB);
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <Mode_Red+0x38>)
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <Mode_Red+0x38>)
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	2301      	movs	r3, #1
 80008b6:	2200      	movs	r2, #0
 80008b8:	2110      	movs	r1, #16
 80008ba:	2020      	movs	r0, #32
 80008bc:	f7ff fe8a 	bl	80005d4 <Led_display>
	return;
 80008c0:	bf00      	nop
}
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40010c00 	.word	0x40010c00
 80008cc:	40010800 	.word	0x40010800

080008d0 <Mode_Yellow>:

void Mode_Yellow() {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af02      	add	r7, sp, #8
	Led_display(Led_11_Pin, Led_12_Pin, 1, 1, GPIOA, GPIOB);
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <Mode_Yellow+0x38>)
 80008d8:	9301      	str	r3, [sp, #4]
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <Mode_Yellow+0x3c>)
 80008dc:	9300      	str	r3, [sp, #0]
 80008de:	2301      	movs	r3, #1
 80008e0:	2201      	movs	r2, #1
 80008e2:	2108      	movs	r1, #8
 80008e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008e8:	f7ff fe74 	bl	80005d4 <Led_display>
	Led_display(Led_21_Pin, Led_22_Pin, 1, 1, GPIOB, GPIOB);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <Mode_Yellow+0x38>)
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <Mode_Yellow+0x38>)
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	2301      	movs	r3, #1
 80008f6:	2201      	movs	r2, #1
 80008f8:	2110      	movs	r1, #16
 80008fa:	2020      	movs	r0, #32
 80008fc:	f7ff fe6a 	bl	80005d4 <Led_display>
	return;
 8000900:	bf00      	nop
}
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40010c00 	.word	0x40010c00
 800090c:	40010800 	.word	0x40010800

08000910 <Mode_Green>:

void Mode_Green() {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af02      	add	r7, sp, #8
	Led_display(Led_11_Pin, Led_12_Pin, 1, 0, GPIOA, GPIOB);
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <Mode_Green+0x38>)
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <Mode_Green+0x3c>)
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2300      	movs	r3, #0
 8000920:	2201      	movs	r2, #1
 8000922:	2108      	movs	r1, #8
 8000924:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000928:	f7ff fe54 	bl	80005d4 <Led_display>
	Led_display(Led_21_Pin, Led_22_Pin, 1, 0, GPIOB, GPIOB);
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <Mode_Green+0x38>)
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <Mode_Green+0x38>)
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2300      	movs	r3, #0
 8000936:	2201      	movs	r2, #1
 8000938:	2110      	movs	r1, #16
 800093a:	2020      	movs	r0, #32
 800093c:	f7ff fe4a 	bl	80005d4 <Led_display>
	return;
 8000940:	bf00      	nop
}
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40010c00 	.word	0x40010c00
 800094c:	40010800 	.word	0x40010800

08000950 <button_reading>:
static GPIO_PinState debounceButtonBuffer3[NO_OF_BUTTONS];
int timer_buttonpress_counter[NO_OF_BUTTONS];
int flag_button_press[NO_OF_BUTTONS] = { 0, 0, 0 };
uint16_t Pin_input[4] = { Mode_Button_Pin, Add_Button_Pin, Confirm_Button_Pin,
		Perdes_Button_Pin };
void button_reading() {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	e08d      	b.n	8000a78 <button_reading+0x128>
		debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 800095c:	4a4b      	ldr	r2, [pc, #300]	; (8000a8c <button_reading+0x13c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	7819      	ldrb	r1, [r3, #0]
 8000964:	4a4a      	ldr	r2, [pc, #296]	; (8000a90 <button_reading+0x140>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4413      	add	r3, r2
 800096a:	460a      	mov	r2, r1
 800096c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 800096e:	4a49      	ldr	r2, [pc, #292]	; (8000a94 <button_reading+0x144>)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4413      	add	r3, r2
 8000974:	7819      	ldrb	r1, [r3, #0]
 8000976:	4a45      	ldr	r2, [pc, #276]	; (8000a8c <button_reading+0x13c>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	460a      	mov	r2, r1
 800097e:	701a      	strb	r2, [r3, #0]
		if (i >= 3) {
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b02      	cmp	r3, #2
 8000984:	dd0f      	ble.n	80009a6 <button_reading+0x56>
			debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(GPIOB, Pin_input[i]);
 8000986:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <button_reading+0x148>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098e:	4619      	mov	r1, r3
 8000990:	4842      	ldr	r0, [pc, #264]	; (8000a9c <button_reading+0x14c>)
 8000992:	f000 ff9f 	bl	80018d4 <HAL_GPIO_ReadPin>
 8000996:	4603      	mov	r3, r0
 8000998:	4619      	mov	r1, r3
 800099a:	4a3e      	ldr	r2, [pc, #248]	; (8000a94 <button_reading+0x144>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4413      	add	r3, r2
 80009a0:	460a      	mov	r2, r1
 80009a2:	701a      	strb	r2, [r3, #0]
 80009a4:	e00e      	b.n	80009c4 <button_reading+0x74>
		} else {
			debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(GPIOA, Pin_input[i]);
 80009a6:	4a3c      	ldr	r2, [pc, #240]	; (8000a98 <button_reading+0x148>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ae:	4619      	mov	r1, r3
 80009b0:	483b      	ldr	r0, [pc, #236]	; (8000aa0 <button_reading+0x150>)
 80009b2:	f000 ff8f 	bl	80018d4 <HAL_GPIO_ReadPin>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4619      	mov	r1, r3
 80009ba:	4a36      	ldr	r2, [pc, #216]	; (8000a94 <button_reading+0x144>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	460a      	mov	r2, r1
 80009c2:	701a      	strb	r2, [r3, #0]
		}
		if ((debounceButtonBuffer0[i] == debounceButtonBuffer1[i])
 80009c4:	4a32      	ldr	r2, [pc, #200]	; (8000a90 <button_reading+0x140>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	781a      	ldrb	r2, [r3, #0]
 80009cc:	492f      	ldr	r1, [pc, #188]	; (8000a8c <button_reading+0x13c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	440b      	add	r3, r1
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d14c      	bne.n	8000a72 <button_reading+0x122>
				&& (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])) {
 80009d8:	4a2c      	ldr	r2, [pc, #176]	; (8000a8c <button_reading+0x13c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	492c      	ldr	r1, [pc, #176]	; (8000a94 <button_reading+0x144>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	440b      	add	r3, r1
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d142      	bne.n	8000a72 <button_reading+0x122>
			if (debounceButtonBuffer3[i] != debounceButtonBuffer2[i]) {
 80009ec:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <button_reading+0x154>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	4927      	ldr	r1, [pc, #156]	; (8000a94 <button_reading+0x144>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	440b      	add	r3, r1
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d019      	beq.n	8000a34 <button_reading+0xe4>
				debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000a00:	4a24      	ldr	r2, [pc, #144]	; (8000a94 <button_reading+0x144>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	7819      	ldrb	r1, [r3, #0]
 8000a08:	4a26      	ldr	r2, [pc, #152]	; (8000aa4 <button_reading+0x154>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	460a      	mov	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]

				if (debounceButtonBuffer2[i] == BUTTON_IS_PRESSED) { //button is press less 3s
 8000a12:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <button_reading+0x144>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4413      	add	r3, r2
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d129      	bne.n	8000a72 <button_reading+0x122>
					flag_button_press[i] = 1; //function to perform the function corresponding to each mode
 8000a1e:	4a22      	ldr	r2, [pc, #136]	; (8000aa8 <button_reading+0x158>)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2101      	movs	r1, #1
 8000a24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timer_buttonpress_counter[i] = NU_OF_DEBOUNCE; //timer for press it will be 3s
 8000a28:	4a20      	ldr	r2, [pc, #128]	; (8000aac <button_reading+0x15c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2164      	movs	r1, #100	; 0x64
 8000a2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a32:	e01e      	b.n	8000a72 <button_reading+0x122>
					//if over this, it mean the button is being pressed.
				}
			} else {
				timer_buttonpress_counter[i]--;
 8000a34:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <button_reading+0x15c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3c:	1e5a      	subs	r2, r3, #1
 8000a3e:	491b      	ldr	r1, [pc, #108]	; (8000aac <button_reading+0x15c>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timer_buttonpress_counter[i] == 0) { //button is being pressed
 8000a46:	4a19      	ldr	r2, [pc, #100]	; (8000aac <button_reading+0x15c>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d10f      	bne.n	8000a72 <button_reading+0x122>
					if (debounceButtonBuffer2[i] == BUTTON_IS_PRESSED) {
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <button_reading+0x144>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4413      	add	r3, r2
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d104      	bne.n	8000a68 <button_reading+0x118>
						flag_button_press[i] = 1;
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <button_reading+0x158>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2101      	movs	r1, #1
 8000a64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					timer_buttonpress_counter[i] = NU_OF_AUTO_COUNTER;
 8000a68:	4a10      	ldr	r2, [pc, #64]	; (8000aac <button_reading+0x15c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2132      	movs	r1, #50	; 0x32
 8000a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3301      	adds	r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	f77f af6e 	ble.w	800095c <button_reading+0xc>
					//change timer to count only 1s similar auto pressed
				}
			}
		}
	}
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000058 	.word	0x20000058
 8000a90:	20000054 	.word	0x20000054
 8000a94:	2000005c 	.word	0x2000005c
 8000a98:	20000018 	.word	0x20000018
 8000a9c:	40010c00 	.word	0x40010c00
 8000aa0:	40010800 	.word	0x40010800
 8000aa4:	20000060 	.word	0x20000060
 8000aa8:	20000074 	.word	0x20000074
 8000aac:	20000064 	.word	0x20000064

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab4:	f000 fb6a 	bl	800118c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab8:	f000 f81c 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000abc:	f000 f8d2 	bl	8000c64 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ac0:	f000 f85a 	bl	8000b78 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ac4:	f000 f8a4 	bl	8000c10 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000ac8:	4807      	ldr	r0, [pc, #28]	; (8000ae8 <main+0x38>)
 8000aca:	f001 fb9d 	bl	8002208 <HAL_TIM_Base_Start_IT>

  SCH_Add_Task(execute_Mode, 0, 1);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4806      	ldr	r0, [pc, #24]	; (8000aec <main+0x3c>)
 8000ad4:	f000 f958 	bl	8000d88 <SCH_Add_Task>
  SCH_Add_Task(	Button_listens, 1, 1);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2101      	movs	r1, #1
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <main+0x40>)
 8000ade:	f000 f953 	bl	8000d88 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_Dispatch_Tasks();
 8000ae2:	f000 f9a5 	bl	8000e30 <SCH_Dispatch_Tasks>
 8000ae6:	e7fc      	b.n	8000ae2 <main+0x32>
 8000ae8:	200000b4 	.word	0x200000b4
 8000aec:	0800060d 	.word	0x0800060d
 8000af0:	08000649 	.word	0x08000649

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b090      	sub	sp, #64	; 0x40
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0318 	add.w	r3, r7, #24
 8000afe:	2228      	movs	r2, #40	; 0x28
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 fb42 	bl	800318c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1e:	2310      	movs	r3, #16
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b22:	2302      	movs	r3, #2
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b26:	2300      	movs	r3, #0
 8000b28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b2a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fefd 	bl	8001934 <HAL_RCC_OscConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b40:	f000 f91d 	bl	8000d7e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b44:	230f      	movs	r3, #15
 8000b46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 f96a 	bl	8001e38 <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b6a:	f000 f908 	bl	8000d7e <Error_Handler>
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3740      	adds	r7, #64	; 0x40
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_TIM2_Init+0x94>)
 8000b96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_TIM2_Init+0x94>)
 8000b9e:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000ba2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MX_TIM2_Init+0x94>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_TIM2_Init+0x94>)
 8000bac:	2209      	movs	r2, #9
 8000bae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MX_TIM2_Init+0x94>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <MX_TIM2_Init+0x94>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bbc:	4813      	ldr	r0, [pc, #76]	; (8000c0c <MX_TIM2_Init+0x94>)
 8000bbe:	f001 fad3 	bl	8002168 <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bc8:	f000 f8d9 	bl	8000d7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_TIM2_Init+0x94>)
 8000bda:	f001 fc6f 	bl	80024bc <HAL_TIM_ConfigClockSource>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000be4:	f000 f8cb 	bl	8000d7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_TIM2_Init+0x94>)
 8000bf6:	f001 fe41 	bl	800287c <HAL_TIMEx_MasterConfigSynchronization>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c00:	f000 f8bd 	bl	8000d7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200000b4 	.word	0x200000b4

08000c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MX_USART2_UART_Init+0x50>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c48:	f001 fe88 	bl	800295c <HAL_UART_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c52:	f000 f894 	bl	8000d7e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000fc 	.word	0x200000fc
 8000c60:	40004400 	.word	0x40004400

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <MX_GPIO_Init+0xe8>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a33      	ldr	r2, [pc, #204]	; (8000d4c <MX_GPIO_Init+0xe8>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <MX_GPIO_Init+0xe8>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <MX_GPIO_Init+0xe8>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <MX_GPIO_Init+0xe8>)
 8000c96:	f043 0308 	orr.w	r3, r3, #8
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <MX_GPIO_Init+0xe8>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_31_Pin|Led_12_Pin|Led_22_Pin|Led_21_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000cae:	4828      	ldr	r0, [pc, #160]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000cb0:	f000 fe27 	bl	8001902 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_32_Pin|Led_11_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000cba:	4826      	ldr	r0, [pc, #152]	; (8000d54 <MX_GPIO_Init+0xf0>)
 8000cbc:	f000 fe21 	bl	8001902 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Mode_Button_Pin Add_Button_Pin */
  GPIO_InitStruct.Pin = Mode_Button_Pin|Add_Button_Pin;
 8000cc0:	2312      	movs	r3, #18
 8000cc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4820      	ldr	r0, [pc, #128]	; (8000d54 <MX_GPIO_Init+0xf0>)
 8000cd4:	f000 fc7a 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Perdes_Button_Pin */
  GPIO_InitStruct.Pin = Perdes_Button_Pin;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Perdes_Button_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4819      	ldr	r0, [pc, #100]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000cec:	f000 fc6e 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Confirm_Button_Pin */
  GPIO_InitStruct.Pin = Confirm_Button_Pin;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Confirm_Button_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	4619      	mov	r1, r3
 8000d02:	4813      	ldr	r0, [pc, #76]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000d04:	f000 fc62 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_31_Pin Led_12_Pin Led_22_Pin Led_21_Pin */
  GPIO_InitStruct.Pin = Led_31_Pin|Led_12_Pin|Led_22_Pin|Led_21_Pin;
 8000d08:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000d0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2302      	movs	r3, #2
 8000d18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480b      	ldr	r0, [pc, #44]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000d22:	f000 fc53 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_32_Pin Led_11_Pin */
  GPIO_InitStruct.Pin = Led_32_Pin|Led_11_Pin;
 8000d26:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000d2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2302      	movs	r3, #2
 8000d36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_GPIO_Init+0xf0>)
 8000d40:	f000 fc44 	bl	80015cc <HAL_GPIO_Init>

}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	40010800 	.word	0x40010800

08000d58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	button_reading();
 8000d60:	f7ff fdf6 	bl	8000950 <button_reading>
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 8000d82:	b672      	cpsid	i
}
 8000d84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <Error_Handler+0x8>

08000d88 <SCH_Add_Task>:
			}
		}
	}
}

int SCH_Add_Task(void (*pFunction)(), unsigned int DELAY, unsigned int PERIOD) {
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b087      	sub	sp, #28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	unsigned char index = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].pTask != 0) && (index < SCH_MAX_TASKS)) {
 8000d98:	e002      	b.n	8000da0 <SCH_Add_Task+0x18>
		index++;
 8000d9a:	7dfb      	ldrb	r3, [r7, #23]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[index].pTask != 0) && (index < SCH_MAX_TASKS)) {
 8000da0:	7dfa      	ldrb	r2, [r7, #23]
 8000da2:	4922      	ldr	r1, [pc, #136]	; (8000e2c <SCH_Add_Task+0xa4>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d002      	beq.n	8000dba <SCH_Add_Task+0x32>
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	2b27      	cmp	r3, #39	; 0x27
 8000db8:	d9ef      	bls.n	8000d9a <SCH_Add_Task+0x12>
	}

	if (index == SCH_MAX_TASKS) {
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
 8000dbc:	2b28      	cmp	r3, #40	; 0x28
 8000dbe:	d102      	bne.n	8000dc6 <SCH_Add_Task+0x3e>
		return -1;
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc4:	e02d      	b.n	8000e22 <SCH_Add_Task+0x9a>
	}
	SCH_tasks_G[index].pTask = pFunction;
 8000dc6:	7dfa      	ldrb	r2, [r7, #23]
 8000dc8:	4918      	ldr	r1, [pc, #96]	; (8000e2c <SCH_Add_Task+0xa4>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	440b      	add	r3, r1
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[index].Delay = DELAY;
 8000dd8:	7dfc      	ldrb	r4, [r7, #23]
 8000dda:	68b8      	ldr	r0, [r7, #8]
 8000ddc:	f7ff faf8 	bl	80003d0 <__aeabi_ui2d>
 8000de0:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <SCH_Add_Task+0xa4>)
 8000de2:	4623      	mov	r3, r4
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4423      	add	r3, r4
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	4413      	add	r3, r2
 8000dec:	3308      	adds	r3, #8
 8000dee:	e9c3 0100 	strd	r0, r1, [r3]
	SCH_tasks_G[index].Period = PERIOD;
 8000df2:	7dfc      	ldrb	r4, [r7, #23]
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff faeb 	bl	80003d0 <__aeabi_ui2d>
 8000dfa:	4a0c      	ldr	r2, [pc, #48]	; (8000e2c <SCH_Add_Task+0xa4>)
 8000dfc:	4623      	mov	r3, r4
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4423      	add	r3, r4
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	4413      	add	r3, r2
 8000e06:	3310      	adds	r3, #16
 8000e08:	e9c3 0100 	strd	r0, r1, [r3]
	SCH_tasks_G[index].RunMe = 0;
 8000e0c:	7dfa      	ldrb	r2, [r7, #23]
 8000e0e:	4907      	ldr	r1, [pc, #28]	; (8000e2c <SCH_Add_Task+0xa4>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	3318      	adds	r3, #24
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
	return index;
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	371c      	adds	r7, #28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000140 	.word	0x20000140

08000e30 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	unsigned char index;
	for (index = 0; index < SCH_MAX_TASKS; index++) {
 8000e36:	2300      	movs	r3, #0
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	e040      	b.n	8000ebe <SCH_Dispatch_Tasks+0x8e>
		if (SCH_tasks_G[index].RunMe > 0) {
 8000e3c:	79fa      	ldrb	r2, [r7, #7]
 8000e3e:	4924      	ldr	r1, [pc, #144]	; (8000ed0 <SCH_Dispatch_Tasks+0xa0>)
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	440b      	add	r3, r1
 8000e4a:	3318      	adds	r3, #24
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	dd32      	ble.n	8000eb8 <SCH_Dispatch_Tasks+0x88>
			(*SCH_tasks_G[index].pTask)();
 8000e52:	79fa      	ldrb	r2, [r7, #7]
 8000e54:	491e      	ldr	r1, [pc, #120]	; (8000ed0 <SCH_Dispatch_Tasks+0xa0>)
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	440b      	add	r3, r1
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4798      	blx	r3
			SCH_tasks_G[index].RunMe -= 1;
 8000e64:	79fa      	ldrb	r2, [r7, #7]
 8000e66:	491a      	ldr	r1, [pc, #104]	; (8000ed0 <SCH_Dispatch_Tasks+0xa0>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	440b      	add	r3, r1
 8000e72:	3318      	adds	r3, #24
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	1e59      	subs	r1, r3, #1
 8000e7a:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <SCH_Dispatch_Tasks+0xa0>)
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4403      	add	r3, r0
 8000e86:	3318      	adds	r3, #24
 8000e88:	6019      	str	r1, [r3, #0]
			if (SCH_tasks_G[index].Period == 0) {
 8000e8a:	79fa      	ldrb	r2, [r7, #7]
 8000e8c:	4910      	ldr	r1, [pc, #64]	; (8000ed0 <SCH_Dispatch_Tasks+0xa0>)
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	440b      	add	r3, r1
 8000e98:	3310      	adds	r3, #16
 8000e9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	f04f 0300 	mov.w	r3, #0
 8000ea6:	f7ff fb63 	bl	8000570 <__aeabi_dcmpeq>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <SCH_Dispatch_Tasks+0x88>
				SCH_Delete_Task(index);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f80e 	bl	8000ed4 <SCH_Delete_Task>
	for (index = 0; index < SCH_MAX_TASKS; index++) {
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b27      	cmp	r3, #39	; 0x27
 8000ec2:	d9bb      	bls.n	8000e3c <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000140 	.word	0x20000140

08000ed4 <SCH_Delete_Task>:

int SCH_Delete_Task(const int TASK_INDEX) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	unsigned char Return_code;
	if (SCH_tasks_G[TASK_INDEX].pTask == 0) {
 8000edc:	4922      	ldr	r1, [pc, #136]	; (8000f68 <SCH_Delete_Task+0x94>)
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	440b      	add	r3, r1
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <SCH_Delete_Task+0x22>
		Return_code = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e001      	b.n	8000efa <SCH_Delete_Task+0x26>
	} else {
		Return_code = 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
	}
	SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 8000efa:	491b      	ldr	r1, [pc, #108]	; (8000f68 <SCH_Delete_Task+0x94>)
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	4613      	mov	r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	440b      	add	r3, r1
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
	SCH_tasks_G[TASK_INDEX].Delay = 0;
 8000f0c:	4916      	ldr	r1, [pc, #88]	; (8000f68 <SCH_Delete_Task+0x94>)
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	f103 0108 	add.w	r1, r3, #8
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	e9c1 2300 	strd	r2, r3, [r1]
	SCH_tasks_G[TASK_INDEX].Period = 0;
 8000f2a:	490f      	ldr	r1, [pc, #60]	; (8000f68 <SCH_Delete_Task+0x94>)
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	440b      	add	r3, r1
 8000f38:	f103 0110 	add.w	r1, r3, #16
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e9c1 2300 	strd	r2, r3, [r1]
	SCH_tasks_G[TASK_INDEX].RunMe = 0;
 8000f48:	4907      	ldr	r1, [pc, #28]	; (8000f68 <SCH_Delete_Task+0x94>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	3318      	adds	r3, #24
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
	return Return_code;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	20000140 	.word	0x20000140

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6193      	str	r3, [r2, #24]
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_MspInit+0x5c>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_MspInit+0x60>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_MspInit+0x60>)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000

08000fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe0:	d113      	bne.n	800100a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_TIM_Base_MspInit+0x44>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_TIM_Base_MspInit+0x44>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	61d3      	str	r3, [r2, #28]
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_TIM_Base_MspInit+0x44>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	201c      	movs	r0, #28
 8001000:	f000 f9fd 	bl	80013fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001004:	201c      	movs	r0, #28
 8001006:	f000 fa16 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <HAL_UART_MspInit+0x98>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d137      	bne.n	80010a8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_UART_MspInit+0x9c>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <HAL_UART_MspInit+0x9c>)
 800103e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001042:	61d3      	str	r3, [r2, #28]
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_UART_MspInit+0x9c>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_UART_MspInit+0x9c>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <HAL_UART_MspInit+0x9c>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_UART_MspInit+0x9c>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001068:	2304      	movs	r3, #4
 800106a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	480f      	ldr	r0, [pc, #60]	; (80010b8 <HAL_UART_MspInit+0xa0>)
 800107c:	f000 faa6 	bl	80015cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001080:	2308      	movs	r3, #8
 8001082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4619      	mov	r1, r3
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <HAL_UART_MspInit+0xa0>)
 8001094:	f000 fa9a 	bl	80015cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2026      	movs	r0, #38	; 0x26
 800109e:	f000 f9ae 	bl	80013fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010a2:	2026      	movs	r0, #38	; 0x26
 80010a4:	f000 f9c7 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010a8:	bf00      	nop
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40010800 	.word	0x40010800

080010bc <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x4>

080010c2 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001102:	f000 f889 	bl	8001218 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <TIM2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <TIM2_IRQHandler+0x10>)
 8001112:	f001 f8cb 	bl	80022ac <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000b4 	.word	0x200000b4

08001120 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <USART2_IRQHandler+0x10>)
 8001126:	f001 fc67 	bl	80029f8 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000fc 	.word	0x200000fc

08001134 <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	; (8001178 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	; (8001184 <LoopFillZerobss+0x22>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001166:	f7ff ffe5 	bl	8001134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f001 ffeb 	bl	8003144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116e:	f7ff fc9f 	bl	8000ab0 <main>
  bx lr
 8001172:	4770      	bx	lr
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800117c:	080031e4 	.word	0x080031e4
  ldr r2, =_sbss
 8001180:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001184:	20000784 	.word	0x20000784

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>
	...

0800118c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x28>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x28>)
 8001196:	f043 0310 	orr.w	r3, r3, #16
 800119a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f923 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fee0 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40022000 	.word	0x40022000

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f93b 	bl	8001452 <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f903 	bl	80013fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000024 	.word	0x20000024
 8001210:	2000002c 	.word	0x2000002c
 8001214:	20000028 	.word	0x20000028

08001218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_IncTick+0x1c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_IncTick+0x20>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a03      	ldr	r2, [pc, #12]	; (8001238 <HAL_IncTick+0x20>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	2000002c 	.word	0x2000002c
 8001238:	20000780 	.word	0x20000780

0800123c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <HAL_GetTick+0x10>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	20000780 	.word	0x20000780

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800127c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4906      	ldr	r1, [pc, #24]	; (80012e8 <__NVIC_EnableIRQ+0x34>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	e000e100 	.word	0xe000e100

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	db0a      	blt.n	8001316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	490c      	ldr	r1, [pc, #48]	; (8001338 <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	0112      	lsls	r2, r2, #4
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	440b      	add	r3, r1
 8001310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001314:	e00a      	b.n	800132c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4908      	ldr	r1, [pc, #32]	; (800133c <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	0112      	lsls	r2, r2, #4
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	440b      	add	r3, r1
 800132a:	761a      	strb	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f1c3 0307 	rsb	r3, r3, #7
 800135a:	2b04      	cmp	r3, #4
 800135c:	bf28      	it	cs
 800135e:	2304      	movcs	r3, #4
 8001360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3304      	adds	r3, #4
 8001366:	2b06      	cmp	r3, #6
 8001368:	d902      	bls.n	8001370 <NVIC_EncodePriority+0x30>
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3b03      	subs	r3, #3
 800136e:	e000      	b.n	8001372 <NVIC_EncodePriority+0x32>
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	f04f 32ff 	mov.w	r2, #4294967295
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43da      	mvns	r2, r3
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	401a      	ands	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	f04f 31ff 	mov.w	r1, #4294967295
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43d9      	mvns	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b4:	d301      	bcc.n	80013ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00f      	b.n	80013da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <SysTick_Config+0x40>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c2:	210f      	movs	r1, #15
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f7ff ff90 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SysTick_Config+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SysTick_Config+0x40>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff2d 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff42 	bl	8001298 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff90 	bl	8001340 <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5f 	bl	80012ec <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff35 	bl	80012b4 <__NVIC_EnableIRQ>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffa2 	bl	80013a4 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_DMA_Abort>:
 * @brief  Abort the DMA Transfer.
 * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma) {
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	73fb      	strb	r3, [r7, #15]

	if (hdma->State != HAL_DMA_STATE_BUSY) {
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800147c:	2b02      	cmp	r3, #2
 800147e:	d008      	beq.n	8001492 <HAL_DMA_Abort+0x28>
		/* no transfer ongoing */
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2204      	movs	r2, #4
 8001484:	639a      	str	r2, [r3, #56]	; 0x38

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2020 	strb.w	r2, [r3, #32]

		return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e020      	b.n	80014d4 <HAL_DMA_Abort+0x6a>
	} else

	{
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 020e 	bic.w	r2, r2, #14
 80014a0:	601a      	str	r2, [r3, #0]

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0201 	bic.w	r2, r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

		/* Clear all flags */
		hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ba:	2101      	movs	r1, #1
 80014bc:	fa01 f202 	lsl.w	r2, r1, r2
 80014c0:	605a      	str	r2, [r3, #4]
	}
	/* Change the DMA state */
	hdma->State = HAL_DMA_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Process Unlocked */
	__HAL_UNLOCK(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2020 	strb.w	r2, [r3, #32]

	return status;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_DMA_Abort_IT>:
 * @brief  Aborts the DMA Transfer in Interrupt mode.
 * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
 *                 the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	73fb      	strb	r3, [r7, #15]

	if (HAL_DMA_STATE_BUSY != hdma->State) {
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d005      	beq.n	8001502 <HAL_DMA_Abort_IT+0x22>
		/* no transfer ongoing */
		hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2204      	movs	r2, #4
 80014fa:	639a      	str	r2, [r3, #56]	; 0x38

		status = HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	e051      	b.n	80015a6 <HAL_DMA_Abort_IT+0xc6>
	} else {
		/* Disable DMA IT */
		__HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 020e 	bic.w	r2, r2, #14
 8001510:	601a      	str	r2, [r3, #0]

		/* Disable the channel */
		__HAL_DMA_DISABLE(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]

		/* Clear all flags */
		__HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a22      	ldr	r2, [pc, #136]	; (80015b0 <HAL_DMA_Abort_IT+0xd0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d029      	beq.n	8001580 <HAL_DMA_Abort_IT+0xa0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a20      	ldr	r2, [pc, #128]	; (80015b4 <HAL_DMA_Abort_IT+0xd4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d022      	beq.n	800157c <HAL_DMA_Abort_IT+0x9c>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <HAL_DMA_Abort_IT+0xd8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d01a      	beq.n	8001576 <HAL_DMA_Abort_IT+0x96>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <HAL_DMA_Abort_IT+0xdc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d012      	beq.n	8001570 <HAL_DMA_Abort_IT+0x90>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <HAL_DMA_Abort_IT+0xe0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d00a      	beq.n	800156a <HAL_DMA_Abort_IT+0x8a>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a1a      	ldr	r2, [pc, #104]	; (80015c4 <HAL_DMA_Abort_IT+0xe4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d102      	bne.n	8001564 <HAL_DMA_Abort_IT+0x84>
 800155e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001562:	e00e      	b.n	8001582 <HAL_DMA_Abort_IT+0xa2>
 8001564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001568:	e00b      	b.n	8001582 <HAL_DMA_Abort_IT+0xa2>
 800156a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800156e:	e008      	b.n	8001582 <HAL_DMA_Abort_IT+0xa2>
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	e005      	b.n	8001582 <HAL_DMA_Abort_IT+0xa2>
 8001576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157a:	e002      	b.n	8001582 <HAL_DMA_Abort_IT+0xa2>
 800157c:	2310      	movs	r3, #16
 800157e:	e000      	b.n	8001582 <HAL_DMA_Abort_IT+0xa2>
 8001580:	2301      	movs	r3, #1
 8001582:	4a11      	ldr	r2, [pc, #68]	; (80015c8 <HAL_DMA_Abort_IT+0xe8>)
 8001584:	6053      	str	r3, [r2, #4]

		/* Change the DMA state */
		hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/* Process Unlocked */
		__HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2020 	strb.w	r2, [r3, #32]

		/* Call User Abort callback */
		if (hdma->XferAbortCallback != NULL) {
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_DMA_Abort_IT+0xc6>
			hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	4798      	blx	r3
		}
	}
	return status;
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40020008 	.word	0x40020008
 80015b4:	4002001c 	.word	0x4002001c
 80015b8:	40020030 	.word	0x40020030
 80015bc:	40020044 	.word	0x40020044
 80015c0:	40020058 	.word	0x40020058
 80015c4:	4002006c 	.word	0x4002006c
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_GPIO_Init>:
 * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 80015cc:	b480      	push	{r7}
 80015ce:	b08b      	sub	sp, #44	; 0x2c
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ioposition;
	uint32_t iocurrent;
	uint32_t temp;
	uint32_t config = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 80015de:	e169      	b.n	80018b4 <HAL_GPIO_Init+0x2e8>
		/* Get the IO position */
		ioposition = (0x01uL << position);
 80015e0:	2201      	movs	r2, #1
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	61fb      	str	r3, [r7, #28]

		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]

		if (iocurrent == ioposition) {
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f040 8158 	bne.w	80018ae <HAL_GPIO_Init+0x2e2>
			/* Check the Alternate function parameters */
			assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

			/* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
			switch (GPIO_Init->Mode) {
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a9a      	ldr	r2, [pc, #616]	; (800186c <HAL_GPIO_Init+0x2a0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d05e      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 8001608:	4a98      	ldr	r2, [pc, #608]	; (800186c <HAL_GPIO_Init+0x2a0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d875      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 800160e:	4a98      	ldr	r2, [pc, #608]	; (8001870 <HAL_GPIO_Init+0x2a4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d058      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 8001614:	4a96      	ldr	r2, [pc, #600]	; (8001870 <HAL_GPIO_Init+0x2a4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d86f      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 800161a:	4a96      	ldr	r2, [pc, #600]	; (8001874 <HAL_GPIO_Init+0x2a8>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d052      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 8001620:	4a94      	ldr	r2, [pc, #592]	; (8001874 <HAL_GPIO_Init+0x2a8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d869      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 8001626:	4a94      	ldr	r2, [pc, #592]	; (8001878 <HAL_GPIO_Init+0x2ac>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d04c      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 800162c:	4a92      	ldr	r2, [pc, #584]	; (8001878 <HAL_GPIO_Init+0x2ac>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d863      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 8001632:	4a92      	ldr	r2, [pc, #584]	; (800187c <HAL_GPIO_Init+0x2b0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d046      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 8001638:	4a90      	ldr	r2, [pc, #576]	; (800187c <HAL_GPIO_Init+0x2b0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d85d      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 800163e:	2b12      	cmp	r3, #18
 8001640:	d82a      	bhi.n	8001698 <HAL_GPIO_Init+0xcc>
 8001642:	2b12      	cmp	r3, #18
 8001644:	d859      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 8001646:	a201      	add	r2, pc, #4	; (adr r2, 800164c <HAL_GPIO_Init+0x80>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	080016c7 	.word	0x080016c7
 8001650:	080016a1 	.word	0x080016a1
 8001654:	080016b3 	.word	0x080016b3
 8001658:	080016f5 	.word	0x080016f5
 800165c:	080016fb 	.word	0x080016fb
 8001660:	080016fb 	.word	0x080016fb
 8001664:	080016fb 	.word	0x080016fb
 8001668:	080016fb 	.word	0x080016fb
 800166c:	080016fb 	.word	0x080016fb
 8001670:	080016fb 	.word	0x080016fb
 8001674:	080016fb 	.word	0x080016fb
 8001678:	080016fb 	.word	0x080016fb
 800167c:	080016fb 	.word	0x080016fb
 8001680:	080016fb 	.word	0x080016fb
 8001684:	080016fb 	.word	0x080016fb
 8001688:	080016fb 	.word	0x080016fb
 800168c:	080016fb 	.word	0x080016fb
 8001690:	080016a9 	.word	0x080016a9
 8001694:	080016bd 	.word	0x080016bd
 8001698:	4a79      	ldr	r2, [pc, #484]	; (8001880 <HAL_GPIO_Init+0x2b4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
				config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
				break;

				/* Parameters are checked with assert_param */
			default:
				break;
 800169e:	e02c      	b.n	80016fa <HAL_GPIO_Init+0x12e>
				config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	623b      	str	r3, [r7, #32]
				break;
 80016a6:	e029      	b.n	80016fc <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	3304      	adds	r3, #4
 80016ae:	623b      	str	r3, [r7, #32]
				break;
 80016b0:	e024      	b.n	80016fc <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	3308      	adds	r3, #8
 80016b8:	623b      	str	r3, [r7, #32]
				break;
 80016ba:	e01f      	b.n	80016fc <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	330c      	adds	r3, #12
 80016c2:	623b      	str	r3, [r7, #32]
				break;
 80016c4:	e01a      	b.n	80016fc <HAL_GPIO_Init+0x130>
				if (GPIO_Init->Pull == GPIO_NOPULL) {
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <HAL_GPIO_Init+0x108>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ce:	2304      	movs	r3, #4
 80016d0:	623b      	str	r3, [r7, #32]
				break;
 80016d2:	e013      	b.n	80016fc <HAL_GPIO_Init+0x130>
				} else if (GPIO_Init->Pull == GPIO_PULLUP) {
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_GPIO_Init+0x11c>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016dc:	2308      	movs	r3, #8
 80016de:	623b      	str	r3, [r7, #32]
					GPIOx->BSRR = ioposition;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	611a      	str	r2, [r3, #16]
				break;
 80016e6:	e009      	b.n	80016fc <HAL_GPIO_Init+0x130>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e8:	2308      	movs	r3, #8
 80016ea:	623b      	str	r3, [r7, #32]
					GPIOx->BRR = ioposition;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	615a      	str	r2, [r3, #20]
				break;
 80016f2:	e003      	b.n	80016fc <HAL_GPIO_Init+0x130>
				config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
				break;
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x130>
				break;
 80016fa:	bf00      	nop
			}

			/* Check if the current bit belongs to first half or last half of the pin count number
			 in order to address CRH or CRL register*/
			configregister =
					(iocurrent < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2bff      	cmp	r3, #255	; 0xff
 8001700:	d801      	bhi.n	8001706 <HAL_GPIO_Init+0x13a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	e001      	b.n	800170a <HAL_GPIO_Init+0x13e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3304      	adds	r3, #4
			configregister =
 800170a:	617b      	str	r3, [r7, #20]
			registeroffset =
					(iocurrent < GPIO_PIN_8) ?
							(position << 2u) : ((position - 8u) << 2u);
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2bff      	cmp	r3, #255	; 0xff
 8001710:	d802      	bhi.n	8001718 <HAL_GPIO_Init+0x14c>
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	e002      	b.n	800171e <HAL_GPIO_Init+0x152>
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	3b08      	subs	r3, #8
 800171c:	009b      	lsls	r3, r3, #2
			registeroffset =
 800171e:	613b      	str	r3, [r7, #16]

			/* Apply the new configuration of the pin to the register */
			MODIFY_REG((*configregister),
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	210f      	movs	r1, #15
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	401a      	ands	r2, r3
 8001730:	6a39      	ldr	r1, [r7, #32]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	fa01 f303 	lsl.w	r3, r1, r3
 8001738:	431a      	orrs	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	601a      	str	r2, [r3, #0]
					((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset),
					(config << registeroffset));

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80b1 	beq.w	80018ae <HAL_GPIO_Init+0x2e2>
				/* Enable AFIO Clock */
				__HAL_RCC_AFIO_CLK_ENABLE();
 800174c:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <HAL_GPIO_Init+0x2b8>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a4c      	ldr	r2, [pc, #304]	; (8001884 <HAL_GPIO_Init+0x2b8>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b4a      	ldr	r3, [pc, #296]	; (8001884 <HAL_GPIO_Init+0x2b8>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
				temp = AFIO->EXTICR[position >> 2u];
 8001764:	4a48      	ldr	r2, [pc, #288]	; (8001888 <HAL_GPIO_Init+0x2bc>)
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001770:	60fb      	str	r3, [r7, #12]
				CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4013      	ands	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
				SET_BIT(temp,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a40      	ldr	r2, [pc, #256]	; (800188c <HAL_GPIO_Init+0x2c0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d013      	beq.n	80017b8 <HAL_GPIO_Init+0x1ec>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a3f      	ldr	r2, [pc, #252]	; (8001890 <HAL_GPIO_Init+0x2c4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d00d      	beq.n	80017b4 <HAL_GPIO_Init+0x1e8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a3e      	ldr	r2, [pc, #248]	; (8001894 <HAL_GPIO_Init+0x2c8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d007      	beq.n	80017b0 <HAL_GPIO_Init+0x1e4>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a3d      	ldr	r2, [pc, #244]	; (8001898 <HAL_GPIO_Init+0x2cc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_GPIO_Init+0x1e0>
 80017a8:	2303      	movs	r3, #3
 80017aa:	e006      	b.n	80017ba <HAL_GPIO_Init+0x1ee>
 80017ac:	2304      	movs	r3, #4
 80017ae:	e004      	b.n	80017ba <HAL_GPIO_Init+0x1ee>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e002      	b.n	80017ba <HAL_GPIO_Init+0x1ee>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_GPIO_Init+0x1ee>
 80017b8:	2300      	movs	r3, #0
 80017ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017bc:	f002 0203 	and.w	r2, r2, #3
 80017c0:	0092      	lsls	r2, r2, #2
 80017c2:	4093      	lsls	r3, r2
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
						(GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
				AFIO->EXTICR[position >> 2u] = temp;
 80017ca:	492f      	ldr	r1, [pc, #188]	; (8001888 <HAL_GPIO_Init+0x2bc>)
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_GPIO_Init+0x226>
					SET_BIT(EXTI->IMR, iocurrent);
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_GPIO_Init+0x2d0>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	492c      	ldr	r1, [pc, #176]	; (800189c <HAL_GPIO_Init+0x2d0>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x234>
				} else {
					CLEAR_BIT(EXTI->IMR, iocurrent);
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_GPIO_Init+0x2d0>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4928      	ldr	r1, [pc, #160]	; (800189c <HAL_GPIO_Init+0x2d0>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]
				}

				/* Configure the event mask */
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <HAL_GPIO_Init+0x24e>
					SET_BIT(EXTI->EMR, iocurrent);
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4922      	ldr	r1, [pc, #136]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x25c>
				} else {
					CLEAR_BIT(EXTI->EMR, iocurrent);
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	43db      	mvns	r3, r3
 8001822:	491e      	ldr	r1, [pc, #120]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001824:	4013      	ands	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
				}

				/* Enable or disable the rising trigger */
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <HAL_GPIO_Init+0x276>
					SET_BIT(EXTI->RTSR, iocurrent);
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	4918      	ldr	r1, [pc, #96]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x284>
				} else {
					CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	43db      	mvns	r3, r3
 800184a:	4914      	ldr	r1, [pc, #80]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800184c:	4013      	ands	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
				}

				/* Enable or disable the falling trigger */
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d021      	beq.n	80018a0 <HAL_GPIO_Init+0x2d4>
					SET_BIT(EXTI->FTSR, iocurrent);
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	490e      	ldr	r1, [pc, #56]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	60cb      	str	r3, [r1, #12]
 8001868:	e021      	b.n	80018ae <HAL_GPIO_Init+0x2e2>
 800186a:	bf00      	nop
 800186c:	10320000 	.word	0x10320000
 8001870:	10310000 	.word	0x10310000
 8001874:	10220000 	.word	0x10220000
 8001878:	10210000 	.word	0x10210000
 800187c:	10120000 	.word	0x10120000
 8001880:	10110000 	.word	0x10110000
 8001884:	40021000 	.word	0x40021000
 8001888:	40010000 	.word	0x40010000
 800188c:	40010800 	.word	0x40010800
 8001890:	40010c00 	.word	0x40010c00
 8001894:	40011000 	.word	0x40011000
 8001898:	40011400 	.word	0x40011400
 800189c:	40010400 	.word	0x40010400
				} else {
					CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_GPIO_Init+0x304>)
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	4909      	ldr	r1, [pc, #36]	; (80018d0 <HAL_GPIO_Init+0x304>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	60cb      	str	r3, [r1, #12]
				}
			}
		}

		position++;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	3301      	adds	r3, #1
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f47f ae8e 	bne.w	80015e0 <HAL_GPIO_Init+0x14>
	}
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	372c      	adds	r7, #44	; 0x2c
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_ReadPin>:
 * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param  GPIO_Pin: specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	e001      	b.n	80018f6 <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
 800190e:	4613      	mov	r3, r2
 8001910:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8001912:	787b      	ldrb	r3, [r7, #1]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 8001918:	887a      	ldrh	r2, [r7, #2]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	611a      	str	r2, [r3, #16]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
	}
}
 800191e:	e003      	b.n	8001928 <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	041a      	lsls	r2, r3, #16
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
	...

08001934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e272      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8087 	beq.w	8001a62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001954:	4b92      	ldr	r3, [pc, #584]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b04      	cmp	r3, #4
 800195e:	d00c      	beq.n	800197a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001960:	4b8f      	ldr	r3, [pc, #572]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b08      	cmp	r3, #8
 800196a:	d112      	bne.n	8001992 <HAL_RCC_OscConfig+0x5e>
 800196c:	4b8c      	ldr	r3, [pc, #560]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001978:	d10b      	bne.n	8001992 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197a:	4b89      	ldr	r3, [pc, #548]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d06c      	beq.n	8001a60 <HAL_RCC_OscConfig+0x12c>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d168      	bne.n	8001a60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e24c      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x76>
 800199c:	4b80      	ldr	r3, [pc, #512]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a7f      	ldr	r2, [pc, #508]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	e02e      	b.n	8001a08 <HAL_RCC_OscConfig+0xd4>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x98>
 80019b2:	4b7b      	ldr	r3, [pc, #492]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7a      	ldr	r2, [pc, #488]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b78      	ldr	r3, [pc, #480]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a77      	ldr	r2, [pc, #476]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e01d      	b.n	8001a08 <HAL_RCC_OscConfig+0xd4>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d4:	d10c      	bne.n	80019f0 <HAL_RCC_OscConfig+0xbc>
 80019d6:	4b72      	ldr	r3, [pc, #456]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a71      	ldr	r2, [pc, #452]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	4b6f      	ldr	r3, [pc, #444]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a6e      	ldr	r2, [pc, #440]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e00b      	b.n	8001a08 <HAL_RCC_OscConfig+0xd4>
 80019f0:	4b6b      	ldr	r3, [pc, #428]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a6a      	ldr	r2, [pc, #424]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a67      	ldr	r2, [pc, #412]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d013      	beq.n	8001a38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fc14 	bl	800123c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff fc10 	bl	800123c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e200      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2a:	4b5d      	ldr	r3, [pc, #372]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0xe4>
 8001a36:	e014      	b.n	8001a62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff fc00 	bl	800123c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fbfc 	bl	800123c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1ec      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a52:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x10c>
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d063      	beq.n	8001b36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6e:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00b      	beq.n	8001a92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a7a:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d11c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x18c>
 8001a86:	4b46      	ldr	r3, [pc, #280]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d116      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d005      	beq.n	8001aaa <HAL_RCC_OscConfig+0x176>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e1c0      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aaa:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4939      	ldr	r1, [pc, #228]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abe:	e03a      	b.n	8001b36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac8:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <HAL_RCC_OscConfig+0x270>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7ff fbb5 	bl	800123c <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fbb1 	bl	800123c <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e1a1      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4927      	ldr	r1, [pc, #156]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
 8001b08:	e015      	b.n	8001b36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fb94 	bl	800123c <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b18:	f7ff fb90 	bl	800123c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e180      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d03a      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d019      	beq.n	8001b7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b50:	f7ff fb74 	bl	800123c <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b58:	f7ff fb70 	bl	800123c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e160      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f000 fad8 	bl	800212c <RCC_Delay>
 8001b7c:	e01c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_RCC_OscConfig+0x274>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b84:	f7ff fb5a 	bl	800123c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8a:	e00f      	b.n	8001bac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fb56 	bl	800123c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d908      	bls.n	8001bac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e146      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	42420000 	.word	0x42420000
 8001ba8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	4b92      	ldr	r3, [pc, #584]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1e9      	bne.n	8001b8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80a6 	beq.w	8001d12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bca:	4b8b      	ldr	r3, [pc, #556]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10d      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b88      	ldr	r3, [pc, #544]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a87      	ldr	r2, [pc, #540]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b85      	ldr	r3, [pc, #532]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	4b82      	ldr	r3, [pc, #520]	; (8001dfc <HAL_RCC_OscConfig+0x4c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d118      	bne.n	8001c30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfe:	4b7f      	ldr	r3, [pc, #508]	; (8001dfc <HAL_RCC_OscConfig+0x4c8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a7e      	ldr	r2, [pc, #504]	; (8001dfc <HAL_RCC_OscConfig+0x4c8>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fb17 	bl	800123c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c12:	f7ff fb13 	bl	800123c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b64      	cmp	r3, #100	; 0x64
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e103      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c24:	4b75      	ldr	r3, [pc, #468]	; (8001dfc <HAL_RCC_OscConfig+0x4c8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x312>
 8001c38:	4b6f      	ldr	r3, [pc, #444]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	4a6e      	ldr	r2, [pc, #440]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6213      	str	r3, [r2, #32]
 8001c44:	e02d      	b.n	8001ca2 <HAL_RCC_OscConfig+0x36e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x334>
 8001c4e:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a69      	ldr	r2, [pc, #420]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	4b67      	ldr	r3, [pc, #412]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a66      	ldr	r2, [pc, #408]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	f023 0304 	bic.w	r3, r3, #4
 8001c64:	6213      	str	r3, [r2, #32]
 8001c66:	e01c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x36e>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	d10c      	bne.n	8001c8a <HAL_RCC_OscConfig+0x356>
 8001c70:	4b61      	ldr	r3, [pc, #388]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4a60      	ldr	r2, [pc, #384]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6213      	str	r3, [r2, #32]
 8001c7c:	4b5e      	ldr	r3, [pc, #376]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4a5d      	ldr	r2, [pc, #372]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6213      	str	r3, [r2, #32]
 8001c88:	e00b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x36e>
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a5a      	ldr	r2, [pc, #360]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	6213      	str	r3, [r2, #32]
 8001c96:	4b58      	ldr	r3, [pc, #352]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	4a57      	ldr	r2, [pc, #348]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	f023 0304 	bic.w	r3, r3, #4
 8001ca0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d015      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001caa:	f7ff fac7 	bl	800123c <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7ff fac3 	bl	800123c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e0b1      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc8:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0ee      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x37e>
 8001cd4:	e014      	b.n	8001d00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd6:	f7ff fab1 	bl	800123c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7ff faad 	bl	800123c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e09b      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf4:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1ee      	bne.n	8001cde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d105      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d06:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a3b      	ldr	r2, [pc, #236]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 8087 	beq.w	8001e2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d1c:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 030c 	and.w	r3, r3, #12
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d061      	beq.n	8001dec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d146      	bne.n	8001dbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d30:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff fa81 	bl	800123c <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff fa7d 	bl	800123c <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e06d      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d64:	d108      	bne.n	8001d78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	4921      	ldr	r1, [pc, #132]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d78:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a19      	ldr	r1, [r3, #32]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	491b      	ldr	r1, [pc, #108]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7ff fa51 	bl	800123c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7ff fa4d 	bl	800123c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e03d      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x46a>
 8001dbc:	e035      	b.n	8001e2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_RCC_OscConfig+0x4cc>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fa3a 	bl	800123c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff fa36 	bl	800123c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e026      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x498>
 8001dea:	e01e      	b.n	8001e2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e019      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_OscConfig+0x500>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0d0      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d910      	bls.n	8001e7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 0207 	bic.w	r2, r3, #7
 8001e62:	4965      	ldr	r1, [pc, #404]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0b8      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d020      	beq.n	8001eca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e94:	4b59      	ldr	r3, [pc, #356]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	4a58      	ldr	r2, [pc, #352]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eac:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a52      	ldr	r2, [pc, #328]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb8:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	494d      	ldr	r1, [pc, #308]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d040      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d115      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e07f      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e073      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f06:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e06b      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f16:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f023 0203 	bic.w	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4936      	ldr	r1, [pc, #216]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f28:	f7ff f988 	bl	800123c <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	f7ff f984 	bl	800123c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e053      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	4b2d      	ldr	r3, [pc, #180]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 020c 	and.w	r2, r3, #12
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d1eb      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f58:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d210      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0207 	bic.w	r2, r3, #7
 8001f6e:	4922      	ldr	r1, [pc, #136]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e032      	b.n	8001fee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4916      	ldr	r1, [pc, #88]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	490e      	ldr	r1, [pc, #56]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fc6:	f000 f821 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	490a      	ldr	r1, [pc, #40]	; (8002000 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	5ccb      	ldrb	r3, [r1, r3]
 8001fda:	fa22 f303 	lsr.w	r3, r2, r3
 8001fde:	4a09      	ldr	r2, [pc, #36]	; (8002004 <HAL_RCC_ClockConfig+0x1cc>)
 8001fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_RCC_ClockConfig+0x1d0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f8e6 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	080031c4 	.word	0x080031c4
 8002004:	20000024 	.word	0x20000024
 8002008:	20000028 	.word	0x20000028

0800200c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	b490      	push	{r4, r7}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002012:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002014:	1d3c      	adds	r4, r7, #4
 8002016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800201c:	f240 2301 	movw	r3, #513	; 0x201
 8002020:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b04      	cmp	r3, #4
 8002044:	d002      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x40>
 8002046:	2b08      	cmp	r3, #8
 8002048:	d003      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0x46>
 800204a:	e02b      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800204c:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800204e:	623b      	str	r3, [r7, #32]
      break;
 8002050:	e02b      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	0c9b      	lsrs	r3, r3, #18
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3328      	adds	r3, #40	; 0x28
 800205c:	443b      	add	r3, r7
 800205e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002062:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d012      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800206e:	4b13      	ldr	r3, [pc, #76]	; (80020bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0c5b      	lsrs	r3, r3, #17
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	3328      	adds	r3, #40	; 0x28
 800207a:	443b      	add	r3, r7
 800207c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002080:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002086:	fb03 f202 	mul.w	r2, r3, r2
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
 8002092:	e004      	b.n	800209e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	623b      	str	r3, [r7, #32]
      break;
 80020a2:	e002      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020a6:	623b      	str	r3, [r7, #32]
      break;
 80020a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020aa:	6a3b      	ldr	r3, [r7, #32]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3728      	adds	r7, #40	; 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc90      	pop	{r4, r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	080031b4 	.word	0x080031b4
 80020bc:	40021000 	.word	0x40021000
 80020c0:	007a1200 	.word	0x007a1200
 80020c4:	003d0900 	.word	0x003d0900

080020c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020cc:	4b02      	ldr	r3, [pc, #8]	; (80020d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	20000024 	.word	0x20000024

080020dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020e0:	f7ff fff2 	bl	80020c8 <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4903      	ldr	r1, [pc, #12]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	080031d4 	.word	0x080031d4

08002104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002108:	f7ff ffde 	bl	80020c8 <HAL_RCC_GetHCLKFreq>
 800210c:	4602      	mov	r2, r0
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	0adb      	lsrs	r3, r3, #11
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	4903      	ldr	r1, [pc, #12]	; (8002128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800211a:	5ccb      	ldrb	r3, [r1, r3]
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	080031d4 	.word	0x080031d4

0800212c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <RCC_Delay+0x34>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <RCC_Delay+0x38>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0a5b      	lsrs	r3, r3, #9
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002148:	bf00      	nop
  }
  while (Delay --);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	60fa      	str	r2, [r7, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f9      	bne.n	8002148 <RCC_Delay+0x1c>
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	20000024 	.word	0x20000024
 8002164:	10624dd3 	.word	0x10624dd3

08002168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e041      	b.n	80021fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe ff1e 	bl	8000fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3304      	adds	r3, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4610      	mov	r0, r2
 80021a8:	f000 fa70 	bl	800268c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d001      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e03a      	b.n	8002296 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <HAL_TIM_Base_Start_IT+0x98>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00e      	beq.n	8002260 <HAL_TIM_Base_Start_IT+0x58>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224a:	d009      	beq.n	8002260 <HAL_TIM_Base_Start_IT+0x58>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a14      	ldr	r2, [pc, #80]	; (80022a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d004      	beq.n	8002260 <HAL_TIM_Base_Start_IT+0x58>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a13      	ldr	r2, [pc, #76]	; (80022a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d111      	bne.n	8002284 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b06      	cmp	r3, #6
 8002270:	d010      	beq.n	8002294 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0201 	orr.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002282:	e007      	b.n	8002294 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	40012c00 	.word	0x40012c00
 80022a4:	40000400 	.word	0x40000400
 80022a8:	40000800 	.word	0x40000800

080022ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d122      	bne.n	8002308 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d11b      	bne.n	8002308 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0202 	mvn.w	r2, #2
 80022d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f9b1 	bl	8002656 <HAL_TIM_IC_CaptureCallback>
 80022f4:	e005      	b.n	8002302 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f9a4 	bl	8002644 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f9b3 	bl	8002668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b04      	cmp	r3, #4
 8002314:	d122      	bne.n	800235c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b04      	cmp	r3, #4
 8002322:	d11b      	bne.n	800235c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0204 	mvn.w	r2, #4
 800232c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f987 	bl	8002656 <HAL_TIM_IC_CaptureCallback>
 8002348:	e005      	b.n	8002356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f97a 	bl	8002644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f989 	bl	8002668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b08      	cmp	r3, #8
 8002368:	d122      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b08      	cmp	r3, #8
 8002376:	d11b      	bne.n	80023b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f06f 0208 	mvn.w	r2, #8
 8002380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2204      	movs	r2, #4
 8002386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f95d 	bl	8002656 <HAL_TIM_IC_CaptureCallback>
 800239c:	e005      	b.n	80023aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f950 	bl	8002644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f95f 	bl	8002668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b10      	cmp	r3, #16
 80023bc:	d122      	bne.n	8002404 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d11b      	bne.n	8002404 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0210 	mvn.w	r2, #16
 80023d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2208      	movs	r2, #8
 80023da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f933 	bl	8002656 <HAL_TIM_IC_CaptureCallback>
 80023f0:	e005      	b.n	80023fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f926 	bl	8002644 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f935 	bl	8002668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b01      	cmp	r3, #1
 8002410:	d10e      	bne.n	8002430 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d107      	bne.n	8002430 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0201 	mvn.w	r2, #1
 8002428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe fc94 	bl	8000d58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243a:	2b80      	cmp	r3, #128	; 0x80
 800243c:	d10e      	bne.n	800245c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002448:	2b80      	cmp	r3, #128	; 0x80
 800244a:	d107      	bne.n	800245c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fa77 	bl	800294a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002466:	2b40      	cmp	r3, #64	; 0x40
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002474:	2b40      	cmp	r3, #64	; 0x40
 8002476:	d107      	bne.n	8002488 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f8f9 	bl	800267a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b20      	cmp	r3, #32
 8002494:	d10e      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	d107      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0220 	mvn.w	r2, #32
 80024ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa42 	bl	8002938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_TIM_ConfigClockSource+0x18>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e0b3      	b.n	800263c <HAL_TIM_ConfigClockSource+0x180>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250c:	d03e      	beq.n	800258c <HAL_TIM_ConfigClockSource+0xd0>
 800250e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002512:	f200 8087 	bhi.w	8002624 <HAL_TIM_ConfigClockSource+0x168>
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	f000 8085 	beq.w	8002628 <HAL_TIM_ConfigClockSource+0x16c>
 800251e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002522:	d87f      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x168>
 8002524:	2b70      	cmp	r3, #112	; 0x70
 8002526:	d01a      	beq.n	800255e <HAL_TIM_ConfigClockSource+0xa2>
 8002528:	2b70      	cmp	r3, #112	; 0x70
 800252a:	d87b      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x168>
 800252c:	2b60      	cmp	r3, #96	; 0x60
 800252e:	d050      	beq.n	80025d2 <HAL_TIM_ConfigClockSource+0x116>
 8002530:	2b60      	cmp	r3, #96	; 0x60
 8002532:	d877      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x168>
 8002534:	2b50      	cmp	r3, #80	; 0x50
 8002536:	d03c      	beq.n	80025b2 <HAL_TIM_ConfigClockSource+0xf6>
 8002538:	2b50      	cmp	r3, #80	; 0x50
 800253a:	d873      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x168>
 800253c:	2b40      	cmp	r3, #64	; 0x40
 800253e:	d058      	beq.n	80025f2 <HAL_TIM_ConfigClockSource+0x136>
 8002540:	2b40      	cmp	r3, #64	; 0x40
 8002542:	d86f      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x168>
 8002544:	2b30      	cmp	r3, #48	; 0x30
 8002546:	d064      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x156>
 8002548:	2b30      	cmp	r3, #48	; 0x30
 800254a:	d86b      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x168>
 800254c:	2b20      	cmp	r3, #32
 800254e:	d060      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x156>
 8002550:	2b20      	cmp	r3, #32
 8002552:	d867      	bhi.n	8002624 <HAL_TIM_ConfigClockSource+0x168>
 8002554:	2b00      	cmp	r3, #0
 8002556:	d05c      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x156>
 8002558:	2b10      	cmp	r3, #16
 800255a:	d05a      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800255c:	e062      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f000 f966 	bl	800283e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002580:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	609a      	str	r2, [r3, #8]
      break;
 800258a:	e04e      	b.n	800262a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f000 f94f 	bl	800283e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ae:	609a      	str	r2, [r3, #8]
      break;
 80025b0:	e03b      	b.n	800262a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	461a      	mov	r2, r3
 80025c0:	f000 f8c6 	bl	8002750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2150      	movs	r1, #80	; 0x50
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f91d 	bl	800280a <TIM_ITRx_SetConfig>
      break;
 80025d0:	e02b      	b.n	800262a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	461a      	mov	r2, r3
 80025e0:	f000 f8e4 	bl	80027ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2160      	movs	r1, #96	; 0x60
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f90d 	bl	800280a <TIM_ITRx_SetConfig>
      break;
 80025f0:	e01b      	b.n	800262a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	461a      	mov	r2, r3
 8002600:	f000 f8a6 	bl	8002750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2140      	movs	r1, #64	; 0x40
 800260a:	4618      	mov	r0, r3
 800260c:	f000 f8fd 	bl	800280a <TIM_ITRx_SetConfig>
      break;
 8002610:	e00b      	b.n	800262a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f000 f8f4 	bl	800280a <TIM_ITRx_SetConfig>
        break;
 8002622:	e002      	b.n	800262a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002624:	bf00      	nop
 8002626:	e000      	b.n	800262a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002628:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a29      	ldr	r2, [pc, #164]	; (8002744 <TIM_Base_SetConfig+0xb8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00b      	beq.n	80026bc <TIM_Base_SetConfig+0x30>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026aa:	d007      	beq.n	80026bc <TIM_Base_SetConfig+0x30>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a26      	ldr	r2, [pc, #152]	; (8002748 <TIM_Base_SetConfig+0xbc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d003      	beq.n	80026bc <TIM_Base_SetConfig+0x30>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a25      	ldr	r2, [pc, #148]	; (800274c <TIM_Base_SetConfig+0xc0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d108      	bne.n	80026ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a1c      	ldr	r2, [pc, #112]	; (8002744 <TIM_Base_SetConfig+0xb8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00b      	beq.n	80026ee <TIM_Base_SetConfig+0x62>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026dc:	d007      	beq.n	80026ee <TIM_Base_SetConfig+0x62>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <TIM_Base_SetConfig+0xbc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d003      	beq.n	80026ee <TIM_Base_SetConfig+0x62>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a18      	ldr	r2, [pc, #96]	; (800274c <TIM_Base_SetConfig+0xc0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d108      	bne.n	8002700 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a07      	ldr	r2, [pc, #28]	; (8002744 <TIM_Base_SetConfig+0xb8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d103      	bne.n	8002734 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	615a      	str	r2, [r3, #20]
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40000400 	.word	0x40000400
 800274c:	40000800 	.word	0x40000800

08002750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	f023 0201 	bic.w	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800277a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f023 030a 	bic.w	r3, r3, #10
 800278c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	621a      	str	r2, [r3, #32]
}
 80027a2:	bf00      	nop
 80027a4:	371c      	adds	r7, #28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f023 0210 	bic.w	r2, r3, #16
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	031b      	lsls	r3, r3, #12
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	621a      	str	r2, [r3, #32]
}
 8002800:	bf00      	nop
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	f043 0307 	orr.w	r3, r3, #7
 800282c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	609a      	str	r2, [r3, #8]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800283e:	b480      	push	{r7}
 8002840:	b087      	sub	sp, #28
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002858:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	021a      	lsls	r2, r3, #8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	431a      	orrs	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	4313      	orrs	r3, r2
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	609a      	str	r2, [r3, #8]
}
 8002872:	bf00      	nop
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002890:	2302      	movs	r3, #2
 8002892:	e046      	b.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a16      	ldr	r2, [pc, #88]	; (800292c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00e      	beq.n	80028f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e0:	d009      	beq.n	80028f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a12      	ldr	r2, [pc, #72]	; (8002930 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d004      	beq.n	80028f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a10      	ldr	r2, [pc, #64]	; (8002934 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10c      	bne.n	8002910 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	4313      	orrs	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800

08002938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_UART_Init+0x12>
		return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e03f      	b.n	80029ee <HAL_UART_Init+0x92>
	assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

	if (huart->gState == HAL_UART_STATE_RESET) {
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_UART_Init+0x2c>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe fb48 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2224      	movs	r2, #36	; 0x24
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Disable the peripheral */
	__HAL_UART_DISABLE(huart);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800299e:	60da      	str	r2, [r3, #12]

	/* Set the UART Communication parameters */
	UART_SetConfig(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fb41 	bl	8003028 <UART_SetConfig>

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b4:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(huart->Instance->CR3,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c4:	615a      	str	r2, [r3, #20]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	/* Enable the peripheral */
	__HAL_UART_ENABLE(huart);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d4:	60da      	str	r2, [r3, #12]

	/* Initialize the UART state */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
	huart->gState = HAL_UART_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	huart->RxState = HAL_UART_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_UART_IRQHandler>:
 * @brief  This function handles UART interrupt request.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	623b      	str	r3, [r7, #32]
	uint32_t cr3its = READ_REG(huart->Instance->CR3);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	61fb      	str	r3, [r7, #28]
	uint32_t errorflags = 0x00U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
	uint32_t dmarequest = 0x00U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]

	/* If no error occurs */
	errorflags =
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	61bb      	str	r3, [r7, #24]
			(isrflags
					& (uint32_t) (USART_SR_PE | USART_SR_FE | USART_SR_ORE
							| USART_SR_NE));
	if (errorflags == RESET) {
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <HAL_UART_IRQHandler+0x52>
		/* UART in mode Receiver -------------------------------------------------*/
		if (((isrflags & USART_SR_RXNE) != RESET)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_UART_IRQHandler+0x52>
				&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_UART_IRQHandler+0x52>
			UART_Receive_IT(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fa46 	bl	8002ed4 <UART_Receive_IT>
			return;
 8002a48:	e17b      	b.n	8002d42 <HAL_UART_IRQHandler+0x34a>
		}
	}

	/* If some errors occur */
	if ((errorflags != RESET)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80b1 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x1bc>
			&& (((cr3its & USART_CR3_EIE) != RESET)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d105      	bne.n	8002a68 <HAL_UART_IRQHandler+0x70>
					|| ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET))) {
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80a6 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x1bc>
		/* UART parity error interrupt occurred ----------------------------------*/
		if (((isrflags & USART_SR_PE) != RESET)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_UART_IRQHandler+0x90>
				&& ((cr1its & USART_CR1_PEIE) != RESET)) {
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_UART_IRQHandler+0x90>
			huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
		}

		/* UART noise error interrupt occurred -----------------------------------*/
		if (((isrflags & USART_SR_NE) != RESET)
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_UART_IRQHandler+0xb0>
				&& ((cr3its & USART_CR3_EIE) != RESET)) {
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d005      	beq.n	8002aa8 <HAL_UART_IRQHandler+0xb0>
			huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f043 0202 	orr.w	r2, r3, #2
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
		}

		/* UART frame error interrupt occurred -----------------------------------*/
		if (((isrflags & USART_SR_FE) != RESET)
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_UART_IRQHandler+0xd0>
				&& ((cr3its & USART_CR3_EIE) != RESET)) {
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_UART_IRQHandler+0xd0>
			huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f043 0204 	orr.w	r2, r3, #4
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
		}

		/* UART Over-Run interrupt occurred --------------------------------------*/
		if (((isrflags & USART_SR_ORE) != RESET)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00f      	beq.n	8002af2 <HAL_UART_IRQHandler+0xfa>
				&& (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d104      	bne.n	8002ae6 <HAL_UART_IRQHandler+0xee>
						|| ((cr3its & USART_CR3_EIE) != RESET))) {
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_UART_IRQHandler+0xfa>
			huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0208 	orr.w	r2, r3, #8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
		}

		/* Call UART Error Call back function if need be --------------------------*/
		if (huart->ErrorCode != HAL_UART_ERROR_NONE) {
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 811e 	beq.w	8002d38 <HAL_UART_IRQHandler+0x340>
			/* UART in mode Receiver -----------------------------------------------*/
			if (((isrflags & USART_SR_RXNE) != RESET)
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <HAL_UART_IRQHandler+0x11e>
					&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_UART_IRQHandler+0x11e>
				UART_Receive_IT(huart);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f9df 	bl	8002ed4 <UART_Receive_IT>
			}

			/* If Overrun error occurs, or if any error occurs in DMA mode reception,
			 consider error as blocking */
			dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	617b      	str	r3, [r7, #20]
			if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <HAL_UART_IRQHandler+0x146>
					|| dmarequest) {
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d031      	beq.n	8002ba2 <HAL_UART_IRQHandler+0x1aa>
				/* Blocking error : transfer is aborted
				 Set the UART state ready to be able to start again the process,
				 Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
				UART_EndRxTransfer(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f921 	bl	8002d86 <UART_EndRxTransfer>

				/* Disable the UART DMA Rx request if enabled */
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d023      	beq.n	8002b9a <HAL_UART_IRQHandler+0x1a2>
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b60:	615a      	str	r2, [r3, #20]

					/* Abort the UART DMA Rx channel */
					if (huart->hdmarx != NULL) {
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d013      	beq.n	8002b92 <HAL_UART_IRQHandler+0x19a>
						/* Set the UART DMA Abort callback :
						 will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
						huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6e:	4a76      	ldr	r2, [pc, #472]	; (8002d48 <HAL_UART_IRQHandler+0x350>)
 8002b70:	635a      	str	r2, [r3, #52]	; 0x34
						if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK) {
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fcb2 	bl	80014e0 <HAL_DMA_Abort_IT>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d016      	beq.n	8002bb0 <HAL_UART_IRQHandler+0x1b8>
							/* Call Directly XferAbortCallback function in case of error */
							huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4798      	blx	r3
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8002b90:	e00e      	b.n	8002bb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
						/*Call legacy weak error callback*/
						HAL_UART_ErrorCallback(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f8e3 	bl	8002d5e <HAL_UART_ErrorCallback>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8002b98:	e00a      	b.n	8002bb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
					/*Call legacy weak error callback*/
					HAL_UART_ErrorCallback(huart);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8df 	bl	8002d5e <HAL_UART_ErrorCallback>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8002ba0:	e006      	b.n	8002bb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
				/*Call legacy weak error callback*/
				HAL_UART_ErrorCallback(huart);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f8db 	bl	8002d5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

				huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
			}
		}
		return;
 8002bae:	e0c3      	b.n	8002d38 <HAL_UART_IRQHandler+0x340>
				if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8002bb0:	bf00      	nop
		return;
 8002bb2:	e0c1      	b.n	8002d38 <HAL_UART_IRQHandler+0x340>
	} /* End if some error occurs */

	/* Check current reception Mode :
	 If Reception till IDLE event has been selected : */
	if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	f040 80a1 	bne.w	8002d00 <HAL_UART_IRQHandler+0x308>
			&& ((isrflags & USART_SR_IDLE) != 0U)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 809b 	beq.w	8002d00 <HAL_UART_IRQHandler+0x308>
			&& ((cr1its & USART_SR_IDLE) != 0U)) {
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8095 	beq.w	8002d00 <HAL_UART_IRQHandler+0x308>
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]

		/* Check if DMA mode is enabled in UART */
		if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) {
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d04e      	beq.n	8002c98 <HAL_UART_IRQHandler+0x2a0>
			/* DMA mode enabled */
			/* Check received length : If all expected data are received, do nothing,
			 (DMA cplt callback will be called).
			 Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
			uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	823b      	strh	r3, [r7, #16]
					huart->hdmarx);
			if ((nb_remaining_rx_data > 0U)
 8002c04:	8a3b      	ldrh	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8098 	beq.w	8002d3c <HAL_UART_IRQHandler+0x344>
					&& (nb_remaining_rx_data < huart->RxXferSize)) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c10:	8a3a      	ldrh	r2, [r7, #16]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	f080 8092 	bcs.w	8002d3c <HAL_UART_IRQHandler+0x344>
				/* Reception is not complete */
				huart->RxXferCount = nb_remaining_rx_data;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8a3a      	ldrh	r2, [r7, #16]
 8002c1c:	85da      	strh	r2, [r3, #46]	; 0x2e

				/* In Normal mode, end DMA xfer and HAL UART Rx process*/
				if (huart->hdmarx->Init.Mode != DMA_CIRCULAR) {
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d02b      	beq.n	8002c80 <HAL_UART_IRQHandler+0x288>
					/* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
					CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c36:	60da      	str	r2, [r3, #12]
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	615a      	str	r2, [r3, #20]

					/* Disable the DMA transfer for the receiver request by resetting the DMAR bit
					 in the UART CR3 register */
					CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c56:	615a      	str	r2, [r3, #20]

					/* At end of Rx process, restore huart->RxState to Ready */
					huart->RxState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
					huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30

					CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68da      	ldr	r2, [r3, #12]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0210 	bic.w	r2, r2, #16
 8002c74:	60da      	str	r2, [r3, #12]

					/* Last bytes received, so no need as the abort is immediate */
					(void) HAL_DMA_Abort(huart->hdmarx);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe fbf5 	bl	800146a <HAL_DMA_Abort>
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
				/*Call legacy weak Rx Event callback*/
				HAL_UARTEx_RxEventCallback(huart,
						(huart->RxXferSize - huart->RxXferCount));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c88:	b29b      	uxth	r3, r3
				HAL_UARTEx_RxEventCallback(huart,
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f86d 	bl	8002d70 <HAL_UARTEx_RxEventCallback>
#endif
			}
			return;
 8002c96:	e051      	b.n	8002d3c <HAL_UART_IRQHandler+0x344>
		} else {
			/* DMA mode not enabled */
			/* Check received length : If all expected data are received, do nothing.
			 Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
			uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	827b      	strh	r3, [r7, #18]
			if ((huart->RxXferCount > 0U) && (nb_rx_data > 0U)) {
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d047      	beq.n	8002d40 <HAL_UART_IRQHandler+0x348>
 8002cb0:	8a7b      	ldrh	r3, [r7, #18]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d044      	beq.n	8002d40 <HAL_UART_IRQHandler+0x348>
				/* Disable the UART Parity Error Interrupt and RXNE interrupts */
				CLEAR_BIT(huart->Instance->CR1,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002cc4:	60da      	str	r2, [r3, #12]
						(USART_CR1_RXNEIE | USART_CR1_PEIE));

				/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
				CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0201 	bic.w	r2, r2, #1
 8002cd4:	615a      	str	r2, [r3, #20]

				/* Rx process is completed, restore huart->RxState to Ready */
				huart->RxState = HAL_UART_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30

				CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0210 	bic.w	r2, r2, #16
 8002cf2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
				/*Call legacy weak Rx Event callback*/
				HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cf4:	8a7b      	ldrh	r3, [r7, #18]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f839 	bl	8002d70 <HAL_UARTEx_RxEventCallback>
#endif
			}
			return;
 8002cfe:	e01f      	b.n	8002d40 <HAL_UART_IRQHandler+0x348>
		}
	}

	/* UART in mode Transmitter ------------------------------------------------*/
	if (((isrflags & USART_SR_TXE) != RESET)
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_UART_IRQHandler+0x324>
			&& ((cr1its & USART_CR1_TXEIE) != RESET)) {
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_UART_IRQHandler+0x324>
		UART_Transmit_IT(huart);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f876 	bl	8002e06 <UART_Transmit_IT>
		return;
 8002d1a:	e012      	b.n	8002d42 <HAL_UART_IRQHandler+0x34a>
	}

	/* UART in mode Transmitter end --------------------------------------------*/
	if (((isrflags & USART_SR_TC) != RESET)
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <HAL_UART_IRQHandler+0x34a>
			&& ((cr1its & USART_CR1_TCIE) != RESET)) {
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_UART_IRQHandler+0x34a>
		UART_EndTransmit_IT(huart);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f8b7 	bl	8002ea4 <UART_EndTransmit_IT>
		return;
 8002d36:	e004      	b.n	8002d42 <HAL_UART_IRQHandler+0x34a>
		return;
 8002d38:	bf00      	nop
 8002d3a:	e002      	b.n	8002d42 <HAL_UART_IRQHandler+0x34a>
			return;
 8002d3c:	bf00      	nop
 8002d3e:	e000      	b.n	8002d42 <HAL_UART_IRQHandler+0x34a>
			return;
 8002d40:	bf00      	nop
	}
}
 8002d42:	3728      	adds	r7, #40	; 0x28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	08002ddf 	.word	0x08002ddf

08002d4c <HAL_UART_TxCpltCallback>:
 * @brief  Tx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
	 the HAL_UART_TxCpltCallback could be implemented in the user file
	 */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <HAL_UART_ErrorCallback>:
 * @brief  UART error callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(huart);
	/* NOTE: This function should not be modified, when the callback is needed,
	 the HAL_UART_ErrorCallback could be implemented in the user file
	 */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <HAL_UARTEx_RxEventCallback>:
 * @param  huart UART handle
 * @param  Size  Number of data available in application reception buffer (indicates a position in
 *               reception buffer until which, data are available)
 * @retval None
 */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]
	UNUSED(Size);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UARTEx_RxEventCallback can be implemented in the user file.
	 */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <UART_EndRxTransfer>:
/**
 * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
 * @param  huart UART handle.
 * @retval None
 */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart) {
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
	/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
	CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d9c:	60da      	str	r2, [r3, #12]
	CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	615a      	str	r2, [r3, #20]

	/* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
	if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d107      	bne.n	8002dc6 <UART_EndRxTransfer+0x40>
		CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0210 	bic.w	r2, r2, #16
 8002dc4:	60da      	str	r2, [r3, #12]
	}

	/* At end of Rx process, restore huart->RxState to Ready */
	huart->RxState = HAL_UART_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <UART_DMAAbortOnError>:
 *         (To be called at end of DMA Abort procedure following error occurrence).
 * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma) {
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart =
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	60fb      	str	r3, [r7, #12]
			(UART_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
	huart->RxXferCount = 0x00U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	85da      	strh	r2, [r3, #46]	; 0x2e
	huart->TxXferCount = 0x00U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
	/*Call legacy weak error callback*/
	HAL_UART_ErrorCallback(huart);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff ffb0 	bl	8002d5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <UART_Transmit_IT>:
 * @brief  Sends an amount of data in non blocking mode.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart) {
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
	uint16_t *tmp;

	/* Check that a Tx process is ongoing */
	if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b21      	cmp	r3, #33	; 0x21
 8002e18:	d13e      	bne.n	8002e98 <UART_Transmit_IT+0x92>
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e22:	d114      	bne.n	8002e4e <UART_Transmit_IT+0x48>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d110      	bne.n	8002e4e <UART_Transmit_IT+0x48>
			tmp = (uint16_t*) huart->pTxBuffPtr;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	60fb      	str	r3, [r7, #12]
			huart->Instance->DR = (uint16_t) (*tmp & (uint16_t) 0x01FF);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e40:	605a      	str	r2, [r3, #4]
			huart->pTxBuffPtr += 2U;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	1c9a      	adds	r2, r3, #2
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	621a      	str	r2, [r3, #32]
 8002e4c:	e008      	b.n	8002e60 <UART_Transmit_IT+0x5a>
		} else {
			huart->Instance->DR = (uint8_t) (*huart->pTxBuffPtr++
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	1c59      	adds	r1, r3, #1
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6211      	str	r1, [r2, #32]
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
					& (uint8_t) 0x00FF);
		}

		if (--huart->TxXferCount == 0U) {
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10f      	bne.n	8002e94 <UART_Transmit_IT+0x8e>
			/* Disable the UART Transmit Complete Interrupt */
			__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e82:	60da      	str	r2, [r3, #12]

			/* Enable the UART Transmit Complete Interrupt */
			__HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e92:	60da      	str	r2, [r3, #12]
		}
		return HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e000      	b.n	8002e9a <UART_Transmit_IT+0x94>
	} else {
		return HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
	}
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <UART_EndTransmit_IT>:
 * @brief  Wraps up transmission in non blocking mode.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	/* Disable the UART Transmit Complete Interrupt */
	__HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eba:	60da      	str	r2, [r3, #12]

	/* Tx process is ended, restore huart->gState to Ready */
	huart->gState = HAL_UART_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
	/*Call legacy weak Tx complete callback*/
	HAL_UART_TxCpltCallback(huart);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff41 	bl	8002d4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

	return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <UART_Receive_IT>:
 * @brief  Receives an amount of data in non blocking mode
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	uint8_t *pdata8bits;
	uint16_t *pdata16bits;

	/* Check that a Rx process is ongoing */
	if (huart->RxState == HAL_UART_STATE_BUSY_RX) {
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b22      	cmp	r3, #34	; 0x22
 8002ee6:	f040 8099 	bne.w	800301c <UART_Receive_IT+0x148>
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef2:	d117      	bne.n	8002f24 <UART_Receive_IT+0x50>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d113      	bne.n	8002f24 <UART_Receive_IT+0x50>
			pdata8bits = NULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
			pdata16bits = (uint16_t*) huart->pRxBuffPtr;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	613b      	str	r3, [r7, #16]
			*pdata16bits = (uint16_t) (huart->Instance->DR & (uint16_t) 0x01FF);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	801a      	strh	r2, [r3, #0]
			huart->pRxBuffPtr += 2U;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	1c9a      	adds	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28
 8002f22:	e026      	b.n	8002f72 <UART_Receive_IT+0x9e>
		} else {
			pdata8bits = (uint8_t*) huart->pRxBuffPtr;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	617b      	str	r3, [r7, #20]
			pdata16bits = NULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]

			if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	d007      	beq.n	8002f48 <UART_Receive_IT+0x74>
					|| ((huart->Init.WordLength == UART_WORDLENGTH_8B)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <UART_Receive_IT+0x82>
							&& (huart->Init.Parity == UART_PARITY_NONE))) {
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d106      	bne.n	8002f56 <UART_Receive_IT+0x82>
				*pdata8bits =
						(uint8_t) (huart->Instance->DR & (uint8_t) 0x00FF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	b2da      	uxtb	r2, r3
				*pdata8bits =
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	e008      	b.n	8002f68 <UART_Receive_IT+0x94>
			} else {
				*pdata8bits =
						(uint8_t) (huart->Instance->DR & (uint8_t) 0x007F);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f62:	b2da      	uxtb	r2, r3
				*pdata8bits =
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	701a      	strb	r2, [r3, #0]
			}
			huart->pRxBuffPtr += 1U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (--huart->RxXferCount == 0U) {
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d148      	bne.n	8003018 <UART_Receive_IT+0x144>
			/* Disable the UART Data Register not empty Interrupt */
			__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0220 	bic.w	r2, r2, #32
 8002f94:	60da      	str	r2, [r3, #12]

			/* Disable the UART Parity Error Interrupt */
			__HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa4:	60da      	str	r2, [r3, #12]

			/* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
			__HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	615a      	str	r2, [r3, #20]

			/* Rx process is completed, restore huart->RxState to Ready */
			huart->RxState = HAL_UART_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

			/* Check current reception Mode :
			 If Reception till IDLE event has been selected : */
			if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) {
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d123      	bne.n	800300e <UART_Receive_IT+0x13a>
				/* Set reception type to Standard */
				huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30

				/* Disable IDLE interrupt */
				CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0210 	bic.w	r2, r2, #16
 8002fda:	60da      	str	r2, [r3, #12]

				/* Check if IDLE flag is set */
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d10a      	bne.n	8003000 <UART_Receive_IT+0x12c>
					/* Clear IDLE flag in ISR */
					__HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
				/*Call legacy weak Rx Event callback*/
				HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff feb2 	bl	8002d70 <HAL_UARTEx_RxEventCallback>
 800300c:	e002      	b.n	8003014 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
				/*Call legacy weak Rx complete callback*/
				HAL_UART_RxCpltCallback(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd feac 	bl	8000d6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
			}

			return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e002      	b.n	800301e <UART_Receive_IT+0x14a>
		}
		return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <UART_Receive_IT+0x14a>
	} else {
		return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
	}
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	assert_param(IS_UART_MODE(huart->Init.Mode));

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits
	 according to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	431a      	orrs	r2, r3
			| huart->Init.Mode;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8003054:	4313      	orrs	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
	MODIFY_REG(huart->Instance->CR1,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003062:	f023 030c 	bic.w	r3, r3, #12
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	430b      	orrs	r3, r1
 800306e:	60d3      	str	r3, [r2, #12]
			tmpreg);
#endif /* USART_CR1_OVER8 */

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE),
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	615a      	str	r2, [r3, #20]
			huart->Init.HwFlowCtl);

	if (huart->Instance == USART1) {
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2c      	ldr	r2, [pc, #176]	; (800313c <UART_SetConfig+0x114>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d103      	bne.n	8003098 <UART_SetConfig+0x70>
		pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7ff f838 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	e002      	b.n	800309e <UART_SetConfig+0x76>
	} else {
		pclk = HAL_RCC_GetPCLK1Freq();
 8003098:	f7ff f820 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 800309c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
	huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009a      	lsls	r2, r3, #2
 80030a8:	441a      	add	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	4a22      	ldr	r2, [pc, #136]	; (8003140 <UART_SetConfig+0x118>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	0119      	lsls	r1, r3, #4
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009a      	lsls	r2, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <UART_SetConfig+0x118>)
 80030d6:	fba3 0302 	umull	r0, r3, r3, r2
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	2064      	movs	r0, #100	; 0x64
 80030de:	fb00 f303 	mul.w	r3, r0, r3
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	3332      	adds	r3, #50	; 0x32
 80030e8:	4a15      	ldr	r2, [pc, #84]	; (8003140 <UART_SetConfig+0x118>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f4:	4419      	add	r1, r3
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009a      	lsls	r2, r3, #2
 8003100:	441a      	add	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	fbb2 f2f3 	udiv	r2, r2, r3
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <UART_SetConfig+0x118>)
 800310e:	fba3 0302 	umull	r0, r3, r3, r2
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	2064      	movs	r0, #100	; 0x64
 8003116:	fb00 f303 	mul.w	r3, r0, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	3332      	adds	r3, #50	; 0x32
 8003120:	4a07      	ldr	r2, [pc, #28]	; (8003140 <UART_SetConfig+0x118>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	f003 020f 	and.w	r2, r3, #15
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	440a      	add	r2, r1
 8003132:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40013800 	.word	0x40013800
 8003140:	51eb851f 	.word	0x51eb851f

08003144 <__libc_init_array>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	2600      	movs	r6, #0
 8003148:	4d0c      	ldr	r5, [pc, #48]	; (800317c <__libc_init_array+0x38>)
 800314a:	4c0d      	ldr	r4, [pc, #52]	; (8003180 <__libc_init_array+0x3c>)
 800314c:	1b64      	subs	r4, r4, r5
 800314e:	10a4      	asrs	r4, r4, #2
 8003150:	42a6      	cmp	r6, r4
 8003152:	d109      	bne.n	8003168 <__libc_init_array+0x24>
 8003154:	f000 f822 	bl	800319c <_init>
 8003158:	2600      	movs	r6, #0
 800315a:	4d0a      	ldr	r5, [pc, #40]	; (8003184 <__libc_init_array+0x40>)
 800315c:	4c0a      	ldr	r4, [pc, #40]	; (8003188 <__libc_init_array+0x44>)
 800315e:	1b64      	subs	r4, r4, r5
 8003160:	10a4      	asrs	r4, r4, #2
 8003162:	42a6      	cmp	r6, r4
 8003164:	d105      	bne.n	8003172 <__libc_init_array+0x2e>
 8003166:	bd70      	pop	{r4, r5, r6, pc}
 8003168:	f855 3b04 	ldr.w	r3, [r5], #4
 800316c:	4798      	blx	r3
 800316e:	3601      	adds	r6, #1
 8003170:	e7ee      	b.n	8003150 <__libc_init_array+0xc>
 8003172:	f855 3b04 	ldr.w	r3, [r5], #4
 8003176:	4798      	blx	r3
 8003178:	3601      	adds	r6, #1
 800317a:	e7f2      	b.n	8003162 <__libc_init_array+0x1e>
 800317c:	080031dc 	.word	0x080031dc
 8003180:	080031dc 	.word	0x080031dc
 8003184:	080031dc 	.word	0x080031dc
 8003188:	080031e0 	.word	0x080031e0

0800318c <memset>:
 800318c:	4603      	mov	r3, r0
 800318e:	4402      	add	r2, r0
 8003190:	4293      	cmp	r3, r2
 8003192:	d100      	bne.n	8003196 <memset+0xa>
 8003194:	4770      	bx	lr
 8003196:	f803 1b01 	strb.w	r1, [r3], #1
 800319a:	e7f9      	b.n	8003190 <memset+0x4>

0800319c <_init>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	bf00      	nop
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr

080031a8 <_fini>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	bf00      	nop
 80031ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ae:	bc08      	pop	{r3}
 80031b0:	469e      	mov	lr, r3
 80031b2:	4770      	bx	lr
